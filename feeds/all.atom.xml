<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DeeKras.com</title><link href="http://www.deekras.com/" rel="alternate"></link><link href="http://www.deekras.com/feeds/all.atom.xml" rel="self"></link><id>http://www.deekras.com/</id><updated>2014-12-15T00:00:00+00:00</updated><entry><title>Working with Decorators</title><link href="http://www.deekras.com/working-with-decorators.html" rel="alternate"></link><updated>2014-12-15T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-15:working-with-decorators.html</id><summary type="html">&lt;h2&gt;Decorators: a function within a function&lt;/h2&gt;
&lt;p&gt;Now a post about decorators.  Decorators are quite useful - when you learn how to use them.  Here's my attempt at making them &lt;strike&gt;easy&lt;/strike&gt; easier to understand.&lt;/p&gt;
&lt;h3&gt;First, when might decorators be used?&lt;/h3&gt;
&lt;p&gt;Decorators are used to extend a function. To give it more functionality. You might want to time how long a function takes. Or, you might want to print a message to the user. Or, you might want to log some data about the function. &lt;/p&gt;
&lt;p&gt;Sometimes, you need to use a function that cannot be changed for whatever reason. Maybe you are getting from a library or another module. You can use a decorator to extend the function. Maybe you want to change the formatting. Or something else.&lt;/p&gt;
&lt;p&gt;Or, you don't want to change the original function, but you do want to extend it temporarily. You might do this when debugging. &lt;/p&gt;
&lt;p&gt;Also, decorators are used in Flask.&lt;/p&gt;
&lt;h3&gt;So, in very short, what are decorators?&lt;/h3&gt;
&lt;p&gt;Say, you have a function that returns a date. But you want the date in a different format.  You can call that date function and then call another function to format the date that you just got.  Or, you can extend the original date function - by wrapping it with a decorator function. In very, very short, the decorator builds on the original function.  &lt;/p&gt;
&lt;h3&gt;What's happening under the hood of decorators?&lt;/h3&gt;
&lt;p&gt;The decorator function (the outer function) is called. It seeks the original function (the one it is wrapping, the inner function) and the original function is run. Then, the decorator (outer) function is run on the return of the original (inner) function.&lt;/p&gt;
&lt;p&gt;It is just like saying: 
&lt;code&gt;original_func = outer_func(original_func)&lt;/code&gt;. In other words, the outer function is being run on the return of the original / inner function.  Oh, btw, functions can call other functions.&lt;/p&gt;
&lt;p&gt;That might not have explained it all, but after this whole blog and you see examples, it might make more sense. I'll attempt to break it down - dot by dot, so all dots are connected.  So hopefully all will be clear.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;OK, with that intro...&lt;/p&gt;
&lt;h3&gt;So how are decorators designed?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create the function that will be the 'decorator'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create the functions that the decorator function will decorate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wrap the decorat&lt;strong&gt;ed&lt;/strong&gt; function with the decorat&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;call the &lt;strong&gt;original&lt;/strong&gt; function. (It is already wrapped and thus the decorator function will also run!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, so that makes it seem so simple. And it is - once you understand how to write the decorator function.&lt;/p&gt;
&lt;h3&gt;Some pseudo code of the decorator function.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;The decorator function&lt;/strong&gt; (outer function)&lt;/p&gt;
&lt;p&gt;1.define the decorator function  &lt;code&gt;def decorator(func):&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include the decorat&lt;strong&gt;ed&lt;/strong&gt; function as the argument in the parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The wrapper function&lt;/strong&gt; (inner function)&lt;/p&gt;
&lt;p&gt;2.define the wrapper function. This function is created on the fly; it wraps around the original function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This can also have args that will be used in the wrapper function. These are pulled from the arguments of the 'decorated function'. &lt;em&gt;For another discussion.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.&lt;em&gt;(optional)&lt;/em&gt; some code - of the wrapper function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this can be any code to be done BEFORE the original function is run. Maybe, print a message, collect a start time.  Or, you may not have any code here at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.include the original function, the &lt;code&gt;func&lt;/code&gt; (the argument in the decorator function) in the code of the wrapper function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it can be called on its own. ex: &lt;code&gt;func()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or called as part of a statement.  ex: &lt;code&gt;return '&amp;lt;em&amp;gt;{}&amp;lt;/em&amp;gt;'.format(func())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.&lt;em&gt;(optional)&lt;/em&gt; some code - of the wrapper function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this can be any code to be done AFTER the original function is run. Maybe, print a message, collect an end time.  Or, you may not have any code here at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.&lt;code&gt;return&lt;/code&gt; something in the wrapper function&lt;/p&gt;
&lt;p&gt;&lt;em&gt;back to&lt;/em&gt; &lt;strong&gt;the decorator function&lt;/strong&gt;  (outer function)&lt;/p&gt;
&lt;p&gt;7.&lt;code&gt;return&lt;/code&gt; what the &lt;code&gt;wrapper&lt;/code&gt; function returned&lt;/p&gt;
&lt;h3&gt;So here is some simple code:&lt;/h3&gt;
&lt;p&gt;This decorator will format any date in the YYYY_MM_DD format. (It uses &lt;code&gt;.format&lt;/code&gt; and &lt;code&gt;strftime&lt;/code&gt; directives.  See more about &lt;a href="http://strftime.org/"&gt;strftime directives&lt;/a&gt; and &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;.format&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pretty_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;getting the date from function: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;got the date: {} (before it was formatted)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:%Y}_{0:%m}_{0:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.&lt;code&gt;def pretty_date(func):&lt;/code&gt; : we define the function and include the &lt;code&gt;func&lt;/code&gt; as the argument.&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;def wrapper():&lt;/code&gt; : this is a function within a function, thus indented.&lt;/p&gt;
&lt;p&gt;3.&lt;code&gt;print 'getting the date from function: {}'.format(func.__name__)&lt;/code&gt; : We don't really need to put code before the function. This is just to show.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;func.__name__&lt;/code&gt; gives the name of &lt;code&gt;func&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.&lt;code&gt;date = func()&lt;/code&gt; : calls the function and assigns it to &lt;code&gt;date&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;code&gt;print 'got the date: {} (before it was formatted)'.format(date)&lt;/code&gt;. We don't really need to put code after the function. This is just to show.&lt;/p&gt;
&lt;p&gt;6.&lt;code&gt;return '{0:%Y}_{0:%m}_{0:%d}'.format(date)&lt;/code&gt; : Here's the return for the inner/ wrapper function.   ---Really, we could have put this line in for line 4. But then, we couldn't have the code to do AFTER the function. (You can't have anything after the &lt;code&gt;return&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;7.&lt;code&gt;return wrapper&lt;/code&gt; : returns what the &lt;code&gt;wrapper&lt;/code&gt; function returned.&lt;/p&gt;
&lt;p&gt;Whew! So, the decorator function has been created. That's the hard part.  Now just have to create the functions that will be decorated (or wrapped) with the decorator.&lt;/p&gt;
&lt;p&gt;In this case, we will create 3 separate functions - &lt;code&gt;get_today()&lt;/code&gt;, &lt;code&gt;get_tomorrrow()&lt;/code&gt;, &lt;code&gt;get_yesterday()&lt;/code&gt; to show how the same decorator can be used for several functions. (For more about working with dates and datetime and datedelta, &lt;a href="http://pymotw.com/2/datetime/"&gt;check out pymotw&lt;/a&gt;.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_yesterday&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2014-12-15 15:47:28.199614
2014-12-16 15:47:28.944899
2014-12-14 15:47:28.944958
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember, the &lt;code&gt;pretty_date&lt;/code&gt; decorator will 'prettify' the date in the format we specified.
The &lt;code&gt;pretty_date&lt;/code&gt; decorator function will take the return &lt;code&gt;get_today()&lt;/code&gt; function and run the &lt;code&gt;wrapper&lt;/code&gt; function on it. And return the 'prettified' date.&lt;/p&gt;
&lt;p&gt;Here goes the decorated functions.  Instead of the above functions standing on their own, we wrap them in the &lt;code&gt;pretty_date&lt;/code&gt; decorator.   Notice the &lt;code&gt;@&lt;/code&gt; before the decorator &lt;code&gt;pretty_date&lt;/code&gt;. Like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_yesterday&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then call the wrapped functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_yesterday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now the results are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2014_12_15
2014_12_16
2014_12_14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's decorators. In short.&lt;/p&gt;
&lt;p&gt;Oh, and a caveat: Those functions that are now wrapped - are always wrapped. That means that &lt;code&gt;get_today()&lt;/code&gt; can't be used to call for the full date &lt;code&gt;2014-12-15 15:47:28.199614&lt;/code&gt;. Whenever, we call &lt;code&gt;get_today()&lt;/code&gt;, it will return &lt;code&gt;2014_12_15&lt;/code&gt; format. You will have to create another function to get the unformatted date. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But that's not all. You can have several decorators wrap a function.&lt;/p&gt;
&lt;p&gt;Here, we'll define a few more decorators.  These create html tags around the string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;html_em&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;em&amp;gt;{}&amp;lt;/em&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;html_strong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;strong&amp;gt;{}&amp;lt;/strong&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's how we wrap the function with these wrappers too. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@html_em&lt;/span&gt;
&lt;span class="nd"&gt;@html_strong&lt;/span&gt;
&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The order matters!  It goes from top to bottom.  From the top of the ladder down (- and then back up again).&lt;/p&gt;
&lt;p&gt;1.First, it  will do &lt;code&gt;@html_em&lt;/code&gt; decorator function. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;func&lt;/code&gt; in &lt;code&gt;format(func())&lt;/code&gt; of that function will call the next decorator function &lt;code&gt;@html_strong&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;And wait for the &lt;code&gt;return&lt;/code&gt; from that call to do its job of adding the &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Then the &lt;code&gt;@html_strong&lt;/code&gt; decorator function will begin.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;func&lt;/code&gt; of the &lt;code&gt;@html_strong&lt;/code&gt;'s &lt;code&gt;format(func())&lt;/code&gt; will call the &lt;code&gt;@pretty_date&lt;/code&gt; decorator function. &lt;/li&gt;
&lt;li&gt;And wait for the &lt;code&gt;return&lt;/code&gt; to do its job of adding the &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.Then, the &lt;code&gt;@pretty_date&lt;/code&gt; decorator function will call the &lt;code&gt;get_today()&lt;/code&gt; function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;And wait for the &lt;code&gt;return&lt;/code&gt; to do its job of formatting the date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.The &lt;code&gt;get_today()&lt;/code&gt; function will get today's date.&lt;/p&gt;
&lt;p&gt;5.Then it goes back up the ladder. &lt;code&gt;@pretty_date&lt;/code&gt; does its work. &lt;code&gt;@html_strong&lt;/code&gt; add &lt;strong&gt;&lt;/strong&gt;&lt;code&gt;and&lt;/code&gt;@html_em&lt;code&gt;adds&lt;/code&gt;&lt;em&gt;&lt;/em&gt;`. &lt;/p&gt;
&lt;p&gt;And finally, the final &lt;code&gt;return&lt;/code&gt; is done.  The newly formatted, 'html'ed date!&lt;/p&gt;
&lt;p&gt;So in essence, the first thing that is being returned is the &lt;code&gt;datetime.datetime.today()&lt;/code&gt;, then it is returning the &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; and last it is returning the &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;2014_12_15&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;for much more on decorators&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python"&gt;from stackoverflow - check out the answer 'Decorator Basics'&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Working with Threads</title><link href="http://www.deekras.com/working-with-threads.html" rel="alternate"></link><updated>2014-12-14T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-14:working-with-threads.html</id><summary type="html">&lt;h4&gt;Working with Threads&lt;/h4&gt;
&lt;p&gt;I've been encouraged to learn sockets and threading. It's been fun. With some frustrating moments when the book I am using and the docs are just not clear enough - for me.  So here I present it in a way that would have worked for me. So I share - in case it makes learning about threads easier for someone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, a scenario where threading can be useful:&lt;/strong&gt; You're using one of those websites that check several airlines for best fares.  Finally the trip to Barcelona!  It would take a long time to search each airline separately.  It woud be so much faster if the computer would search several airlines concurrently.  Thankfully, that is what they do - saving us much time.&lt;/p&gt;
&lt;p&gt;That's exactly what threading does. The program sets off to do several things at the same time - each function on its own thread.  This is especially useful when the functions don't rely on or get data from each other.  Thread1 searches American Airlines, Thread2 searches Air France and Thread3 searches Iberia. And so on. And they each come back with their results when they are done. And then you can choose the best flight to Barcelona.&lt;/p&gt;
&lt;p&gt;So that's what threading does. Sure, that's oversimplified.  And, I'm not sure how those flight aggregator programs really work, but that is a scenario where we'd see the benefits of threads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What's happening under the hood of threads?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First some basic things to know:
- Threads execute parellel within the same process - and as such, they share all the same context (name space, address, etc.)
- Threads have a beginning, the execution and an end.
- locks. &lt;em&gt;Gotto add more here.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And here's how it all works - the pseudo code.&lt;/strong&gt;
 1. create the thread instances
 2. execute the code
 3. exit the thread and do whatever &lt;/p&gt;
&lt;p&gt;So in the case of the search for &lt;strike&gt; best tickets to Barcelona&lt;/strike&gt;. Nah, that would be too much code; here is a much simpler scenario. Trying to find the local time in several places in the world. (Of course, there is no real need to thread for these queries, since they are super quick. But this will give an idea about how threading works.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the search query - what places we are looking for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;these are hardcoded in a dictionary called &lt;code&gt;places&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;we'll use &lt;code&gt;www.timeapi.org&lt;/code&gt; to find the local time for those places.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a thread instance for each place&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in a &lt;code&gt;for loop&lt;/code&gt;, we will create a thread for each query.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the concurrent query searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When all query results come in, display the places and times on the screen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;atexit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt;

&lt;span class="n"&gt;url_lookup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www.timeapi.org/{}/now&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;Moscow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;msk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;Kuwait&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;ast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;est&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;Copenhagen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c"&gt;#place: time_zone code&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_display_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time_zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_lookup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_zone&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;    
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{:&amp;gt;10} | {:&amp;lt;15}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;starting at:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_display_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_atexit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;all done at:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First the imports.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url_lookup = 'http://www.timeapi.org/{}/now'&lt;/code&gt;:
Then, the url that we'll use to find the time. Notice the curly braces &lt;code&gt;{}&lt;/code&gt;. We'll use that later to insert the time_zone., with &lt;code&gt;.format&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;places&lt;/code&gt;: This is a dictionary of places and time zones codes (as this API likes it). &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def _display_time(place):&lt;/code&gt;  This function&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;gets the time zone (the value of the key &lt;code&gt;place&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gets the current time - using the url with the time_zone inserted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uses the &lt;code&gt;requests&lt;/code&gt; method. Sends a 'GET' request to the url; the response will be the &lt;code&gt;.content&lt;/code&gt; of the &lt;code&gt;requests.get&lt;/code&gt;. See more about &lt;code&gt;requests&lt;/code&gt; in my &lt;a href="http://www.deekras.com/using-a-weather-api-forecastio.html#requests"&gt;previous post&lt;/a&gt; and in the &lt;a href="http://docs.python-requests.org/en/latest/"&gt;docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;uses the &lt;code&gt;.format&lt;/code&gt; method to insert the string data. &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;Read more about &lt;code&gt;.format&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prints/ displays the &lt;code&gt;place&lt;/code&gt; and &lt;code&gt;current_time&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{:&amp;gt;10}&lt;/code&gt; is the formatting - right aligned - 10 width.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:&amp;lt;15}&lt;/code&gt; - left aligned - 15 width&lt;/li&gt;
&lt;li&gt;Read more about formatting with &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;&lt;code&gt;.format&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current_time[11:19]&lt;/code&gt; - the time comes back as a long string &lt;code&gt;2014-12-14T01:47:46+00:00&lt;/code&gt;. I just sliced it to get the data I need. More about &lt;a href="https://docs.python.org/2/tutorial/introduction.html#strings"&gt;slicing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;def main():&lt;/code&gt;  This is where the threading happens!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;print the current time. Just to see how long the process takes.  To compare to the time we print at the very end of this whole script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;for loop&lt;/code&gt; for each &lt;code&gt;place&lt;/code&gt; in the &lt;code&gt;places&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;threading.Thread(target=_display_time, args=(place,)).start()&lt;/code&gt;: OK, a lot going on here. This is where all the threading happens.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;threading.Thread&lt;/code&gt;: A &lt;code&gt;Thread&lt;/code&gt; is an object that represents a single thread for execution.  We're in a loop here, so we'll be creating several instances of Thread.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Thread&lt;/code&gt; class has these arguments &lt;code&gt;threading.Thread(group=None, target=None, name=None, args=(), kwargs={})&lt;/code&gt;  We don't need all those in our case. &lt;a href="https://docs.python.org/2/library/threading.html#thread-objects"&gt;see more about Thread&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;target=_display_time&lt;/code&gt;: the target is the function that will be called (&lt;code&gt;run&lt;/code&gt;) when the Thread is created.  In this case it is the &lt;code&gt;_display_time&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args=(place,)&lt;/code&gt;: these are the args for the &lt;code&gt;target&lt;/code&gt;. In this case, the &lt;code&gt;place&lt;/code&gt; parameter for the &lt;code&gt;_display_time&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.start()&lt;/code&gt;: gets the thread started. The &lt;code&gt;start&lt;/code&gt; is what actually gets the &lt;code&gt;target&lt;/code&gt;/ _display_time function started.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;@register&lt;/code&gt; is a decorator for the &lt;code&gt;_atexit()&lt;/code&gt; function.  Together, they are a function that registers an exit function - to do something just before the script quits. In this case, print the current time to compare it to the start time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in way too short, &lt;code&gt;decorators&lt;/code&gt; #need more about decorators &lt;a href="http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/"&gt;Lots more about decorators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there, a very simple threading process.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Of course, there is much more to threading. A very clear, easy to understand resource. &lt;a href="http://pymotw.com/2/threading/"&gt;http://pymotw.com/2/threading/&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Using a weather api (forecast.io)</title><link href="http://www.deekras.com/using-a-weather-api-forecastio.html" rel="alternate"></link><updated>2014-12-13T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-13:using-a-weather-api-forecastio.html</id><summary type="html">&lt;h4&gt;Kinda cool to get the weather jsut the way I need it&lt;/h4&gt;
&lt;p&gt;Moving along in discussing some of features of the little application I wrote.  &lt;/p&gt;
&lt;p&gt;I already &lt;a href="http://www.deekras.com/get-the-public-ip-of-users-computer.html"&gt;got the IP&lt;/a&gt; and then &lt;a href="http://www.deekras.com/finding-longitude-latitude-based-on-ip.html"&gt;found the longitude and latitude coordinates based on that IP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to find the local weather for the current day. I tried several weather apis that were suggested by fellow HackerSchoolers. I found that the best and easiest to use is &lt;a href="https://developer.forecast.io/"&gt;&lt;strong&gt;forecast.io&lt;/strong&gt;&lt;/a&gt;. And it gave me the opportunity to work with json files.&lt;/p&gt;
&lt;p&gt;First, I got myself a key from &lt;a href="https://developer.forecast.io/"&gt;https://developer.forecast.io/&lt;/a&gt;. It's free.&lt;/p&gt;
&lt;p&gt;And I also  did &lt;code&gt;pip install python-forecastio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I already had my &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt; so I passed those into the &lt;code&gt;get_weather&lt;/code&gt; function as parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;forecast_io_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;get your own key&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;api_forecast_io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://api.forecast.io/forecast/{}/{},{},{}&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_weather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{}T12:00:00-0400&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="n"&gt;lookup_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_forecast_io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forecast_io_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lookup_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;hourly_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;hourly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;date&lt;/code&gt;:    The api has optional parameter of time/date. This can be a datetime object. So first I import the &lt;code&gt;datetime&lt;/code&gt; module.
And import the &lt;a name="requests"&gt;&lt;code&gt;requests&lt;/code&gt; module &lt;/a&gt;  so I get the response from looking up a specific url. &lt;em&gt;Read more about &lt;a href="http://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The date/time must be either UNIX time or a string in this format. &lt;a href="#time"&gt;See comment below&lt;/a&gt;.   I like to use the &lt;code&gt;.format&lt;/code&gt; method to fill the string with variables. &lt;em&gt;Read more about &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;.format&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lookup_url&lt;/code&gt;:   This is the url with the values filled in. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;json_response&lt;/code&gt;:     The response from the 'GET' request is a json file, which essentially is a list of dictionaries.  In this case,  a list of  dictionaries of dictionaries.  Seems like a threw myself right into a deep json file. Really had to sit on this file to understand it. Eventually I got it. &lt;em&gt;See  the json file below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hourly_data&lt;/code&gt;:   This is the &lt;code&gt;json_response&lt;/code&gt;, using the &lt;code&gt;hourly&lt;/code&gt; key to get the values of the &lt;code&gt;data&lt;/code&gt; key.   The value of the &lt;code&gt;hourly&lt;/code&gt; key is several dictionaries – one for every hour.&lt;/p&gt;
&lt;p&gt;Here's what just some of that json_response looks like. Look for the &lt;code&gt;hourly&lt;/code&gt; key (about 5 lines in) and then for the &lt;code&gt;data&lt;/code&gt; key (not far after the hourly key). &lt;em&gt;NOTE: I put in the line breaks; before the data was running as one long line.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;42.8964&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mf"&gt;78.8852&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;America/New_York&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;offset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;currently&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419436800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Overcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;
&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.09&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipType&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;48.29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;43.71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;45.09&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;6.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1003.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;294.97&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hourly&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Light rain starting overnight.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419397200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Overcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;44.44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;7.67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;146&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;1011.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;300.77&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419400800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Drizzle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;0.0081&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipType&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;44.19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;39.28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1011.55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;300.83&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419404400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Drizzle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0056&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipType&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;44.24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;38.87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;41.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;147&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;7.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1010.87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;300.48&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c1"&gt;# and there is much more in that json file.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly, I created a list of dictionaries of just the data I needed: for each hour, I need the temperature and windspeed and windchill. Using the temperature and windspeed, I could figure out the windchill.  I found the windchill formula online. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;  &lt;span class="c"&gt;# used in the windchill formula&lt;/span&gt;

&lt;span class="c"&gt;## continues from function above&lt;/span&gt;
&lt;span class="n"&gt;hourly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hourly_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;#find the windchill&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;windSpeed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;windchill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6215&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;35.75&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4275&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;hour_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;windspeed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;windSpeed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;windchill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;windchill&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;hourly_weather&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hourly&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;hourly&lt;/code&gt;:    I created a blank list &lt;code&gt;hourly&lt;/code&gt; to which I will append a new dictionary for each hour.&lt;/p&gt;
&lt;p&gt;Using a for loop -  for each hour, I evaluate the windchill and create a new dictionary &lt;code&gt;hour_dict&lt;/code&gt; and add keys/ values for &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;windSpeed&lt;/code&gt; and &lt;code&gt;windchill&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;windchill&lt;/code&gt;: I found the windchill formula online. I get &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; for the temperature and windspeed. Those one letters are much shorter than the full name of the variable, much easier to type. (BTW, &lt;code&gt;math.ceil(x)&lt;/code&gt; returns the smallest integer value greater than or equal to x. In other words, it always rounds up.)&lt;/p&gt;
&lt;p&gt;Lastly, I append the new dictionary to the &lt;code&gt;hourly&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;And walla! I have my list of dictionaries of weather info for each hour of the day.  Next step would be to display it in a useful way. Maybe a different color based on the windchill. According to that &lt;a href="https://www.idph.state.ia.us/hcci/common/pdf/weatherwatch.pdf"&gt;chart&lt;/a&gt;, a windchill above 32F is comfortable for outdoor play and thus can be presented in GREEN. YELLOW is for temps between 13F and 32F. Anything lower than that is RED. And I'd probably also provide the data in celsius.&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h3&gt;&lt;a name="time"&gt;about the TIME FORMAT &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TIME should either be a UNIX time (that is, seconds since midnight GMT on 1 Jan 1970) or a string formatted as follows: &lt;code&gt;[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS]&lt;/code&gt; (with an optional time zone formatted as Z for GMT time or {+,-}[HH][MM] for an offset in minutes or seconds). For the latter format, if no timezone is present, local time (at the provided latitude and longitude) is assumed. (This string format is a subset of ISO 8601 time. An as example, &lt;code&gt;2013-05-06T12:00:00-0400&lt;/code&gt;.)&lt;/p&gt;
&lt;h3&gt;MORE ABOUT THE PYTHON WRAPPER for FORECAST.IO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ZeevG/python-forecast.io"&gt;https://github.com/ZeevG/python-forecast.io&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Finding Longitude &amp; Latitude based on IP</title><link href="http://www.deekras.com/finding-longitude-latitude-based-on-ip.html" rel="alternate"></link><updated>2014-12-12T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-12:finding-longitude-latitude-based-on-ip.html</id><summary type="html">&lt;h4&gt;Once I had the IP, I needed to find the longitude &amp;amp; latitude coordinates&lt;/h4&gt;
&lt;p&gt;On that &lt;a href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html"&gt;recent project&lt;/a&gt; I was working on, I was looking for the local weather based on where the user is located. So first, &lt;a href="http://www.deekras.com/get-the-public-ip-of-users-computer.html"&gt;I got the IP&lt;/a&gt;. With that IP, I used &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt; to find the longitude and latitude coordinates.  Later, I will use those coordinates to find the local weather.&lt;/p&gt;
&lt;p&gt;First, I downloaded the GeoIP data from &lt;a href="https://pypi.python.org/pypi/pygeoip/"&gt;https://pypi.python.org/pypi/pygeoip/&lt;/a&gt; and unzipped it. And saved the GeoLiteCity.dat on my local server. &lt;code&gt;'/path/GeoLiteCity.dat'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also had to &lt;code&gt;pip install pygeoip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygeoip&lt;/span&gt;   

&lt;span class="n"&gt;geoip_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygeoip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeoIP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/path/GeoLiteCity.dat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_lat_lng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geoip_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_by_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;data&lt;/code&gt;:  In this case, I used the &lt;strong&gt;record_by_addr(addr)&lt;/strong&gt; attribute since I had the addr, the IP. And I want the full record.&lt;br /&gt;
There are many other attributes you can use with this geoip data. Checkout more at: &lt;a href="http://pygeoip.readthedocs.org/en/v0.3.2/api-reference.html"&gt;http://pygeoip.readthedocs.org/en/v0.3.2/api-reference.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a dictionary. And I called the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; keys of &lt;code&gt;data&lt;/code&gt; to find the values of &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt;, I will be able to get the weather for those coordinates. Using &lt;strong&gt;forecast_io&lt;/strong&gt;. More on that next time.&lt;/p&gt;</summary></entry><entry><title>Get the public IP of user's computer</title><link href="http://www.deekras.com/get-the-public-ip-of-users-computer.html" rel="alternate"></link><updated>2014-12-11T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-11:get-the-public-ip-of-users-computer.html</id><summary type="html">&lt;h4&gt;Here's how to get the IP&lt;/h4&gt;
&lt;p&gt;For a &lt;a href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html"&gt;recent project&lt;/a&gt;, I needed to get the longitude and latitude of where the user was at the time.  And from that data, I could get the local weather.&lt;/p&gt;
&lt;p&gt;To do that, I'd find her local IP and then later use  &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt; to find the coordinates of that IP. (That's another post)&lt;/p&gt;
&lt;p&gt;First, I used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;request.remote_addr&lt;/code&gt;: &lt;code&gt;request&lt;/code&gt; is part of the &lt;a href="http://flask.pocoo.org/docs/0.10/api/"&gt;Flask module&lt;/a&gt; that i was using to create this web application. In very short, the &lt;code&gt;request&lt;/code&gt; 'remembers' the value of what we were requesting. Check out the &lt;a href="http://flask.pocoo.org/docs/0.10/api/#incoming-request-data"&gt;request class of Flask&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then a fellow HackerSchooler pointed out that sometimes that might get my local host (127.0.0.1) and not the IP as I thought I might get. &lt;/p&gt;
&lt;p&gt;The suggestion was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First attempt to get the IP that way, since it is more 'resources efficient'.&lt;/li&gt;
&lt;li&gt;Also have an &lt;code&gt;if&lt;/code&gt; statement to check if it did indeed get me that local host.&lt;/li&gt;
&lt;li&gt;And if it is the localhost, then use &lt;code&gt;icanhazip.com&lt;/code&gt; to get the IP.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;span class="c"&gt;#import the request module&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_ip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://icanhazip.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;requests.get&lt;/code&gt;:  the &lt;code&gt;ip&lt;/code&gt; is the response. It is the &lt;code&gt;content&lt;/code&gt; from the &lt;code&gt;get&lt;/code&gt; request to &lt;code&gt;"http://icanhazip.com/"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read more about the different attributes for&lt;/em&gt;  requests.get(some_url).attributes
&lt;a href="http://docs.python-requests.org/en/latest/user/quickstart/#make-a-request"&gt;http://docs.python-requests.org/en/latest/user/quickstart/#make-a-request&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;---MORE ABOUT REQUESTS---&lt;/h5&gt;
&lt;p&gt;requests is a more reliable library than the old urllib2&lt;br&gt;
&lt;a href="http://docs.python-requests.org/en/latest/"&gt;http://docs.python-requests.org/en/latest/ &lt;/a&gt; &lt;/p&gt;</summary></entry><entry><title>My first Python project … and what I learned</title><link href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html" rel="alternate"></link><updated>2014-12-10T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-10:my-first-python-project-and-what-i-learned.html</id><summary type="html">&lt;h4&gt;My first project. And I learned tons.&lt;/h4&gt;
&lt;p&gt;Been working my way through  &lt;a href="http://books.google.com/books/about/Core_Python_Programming.html?id=CUIgM3e-I5gC"&gt;Core Python Programming&lt;/a&gt;. And having lots of  fun.  Learning tons, quickly. Strings, functions, classes, loops, comprehensions, iterables, tuples, and the many attributes and properties of each. And also the libraries.  What cool stuff I could do. When I get past the tutorials.&lt;/p&gt;
&lt;p&gt;But there's nothing like working on real life problems. With peers. And being able to tap into the experience and knowledge of mentors. That is what I got during my stint at &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt; during fall 2014.&lt;/p&gt;
&lt;p&gt;In previous jobs, I had worked side by side with the programmers on solutions to our company's needs. So I had an idea of the magic of what computer programmers can do.  And finally, I decided to learn it for myself. And I love it.&lt;/p&gt;
&lt;p&gt;So when I got to Hacker School, even though I didn't have much programming under my belt, I jumped right in.  I started working on a real solution to a small challenge. Nothing fancy, but useful to some people:  Some school teachers were having a hard time determining if it was too cold to go outside to play on winter days. They had been given a &lt;a href="https://www.idph.state.ia.us/hcci/common/pdf/weatherwatch.pdf"&gt;chart&lt;/a&gt; with wind-chills and colors indicating how comfortable it would be for outdoor play. They found it confusing and wanted something simpler to understand.  And so I had an idea for my first application.  &lt;/p&gt;
&lt;p&gt;It involved getting the current IP address (using &lt;code&gt;http://icanhazip.com/&lt;/code&gt;), and then the corresponding longitude &amp;amp; latitude coordinates (using &lt;code&gt;pygeoip.GeoIP&lt;/code&gt;) and then finding the current weather using those coordinates (using the &lt;code&gt;forecast.io&lt;/code&gt;  weather API).  I wrote it in Python, with Flask. I'll put it up here some day soon.&lt;/p&gt;
&lt;p&gt;Maybe an ambitious project for just starting out. But that is the best part of Hacker School. Tapping into the experiences and help from peers and the facilitators.  Lots of people showed me little tricks and tips to use to build this little application.  And it gave me lots of practice with peer programming and review. I am so grateful to all who helped me muster through the project.&lt;/p&gt;
&lt;p&gt;Once it was working well, I added some extra features to make it even more useful. Like finding the weather based on zip code. For that I used the &lt;code&gt;zippopotamus&lt;/code&gt; API (api.zippopotam.us).  I even set it up to send daily emails (using &lt;code&gt;mailgun&lt;/code&gt;) and/ or texts (using &lt;code&gt;twilio&lt;/code&gt;) to the teachers using the data stored in a &lt;code&gt;SQL&lt;/code&gt; database.&lt;/p&gt;
&lt;p&gt;In the end, from this one project, I got to work with &lt;code&gt;JSON&lt;/code&gt; files, &lt;code&gt;html&lt;/code&gt;, HTTP &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;, APIs, lots of the Flask commands. Later, I refactored it to work with &lt;code&gt;SQLAlchemy&lt;/code&gt; and &lt;code&gt;WTForms&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Not bad for my first foray into programming.&lt;/p&gt;</summary></entry><entry><title>About my Blog</title><link href="http://www.deekras.com/about-my-blog.html" rel="alternate"></link><updated>2014-12-09T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-09:about-my-blog.html</id><summary type="html">&lt;h4&gt;So here's a little about me and this blog.&lt;/h4&gt;
&lt;p&gt;I'm fairly new to formal programming. In the past, I had dabbled in Access and Excel and played with VBA and SQL.  I always loved the logic of it.  But recently, I decided to jump fully into programming. I found a great mentor and was advised to start with Python. &lt;/p&gt;
&lt;p&gt;I got a few books and was directed to some awesome websites and of course the Python docs. And then got started.&lt;/p&gt;
&lt;p&gt;Many of those resources were great.  And some were more confusing than useful - at least to me.  &lt;/p&gt;
&lt;p&gt;And then, I had the most wonderful opportunity to be accepted to the Hacker School program in Fall 2014. On the &lt;a href="https://www.hackerschool.com/"&gt;Hacker School website&lt;/a&gt;, they call it a 'retreat for programmers', and it was. For 12 weeks, I was fully immersed in programming - with great facilitators and mentors who assisted and guided me through the many questions I had.  I also got to work with fellow Hacker Schoolers in peer programming. And there were lots of break out discussions and workshops and resources.  I will probably write more about the Hacker School experience.&lt;/p&gt;
&lt;p&gt;And this blog is about sharing some of those discussions - so that someone else may benefit.  I will write my blog in the way that I learned. Lots of practical application of the many different methods and libraries and all. With lots of explanations of what the code means and links for further reading.&lt;/p&gt;
&lt;p&gt;I'm always learning, so your comments are helpful.&lt;/p&gt;
&lt;p&gt;Dee Kras&lt;/p&gt;
&lt;p&gt;&lt;em&gt;early winter 2014&lt;/em&gt;&lt;/p&gt;</summary></entry></feed>