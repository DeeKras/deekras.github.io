<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DeeKras.com</title><link href="http://www.deekras.com/" rel="alternate"></link><link href="http://www.deekras.com/feeds/python.atom.xml" rel="self"></link><id>http://www.deekras.com/</id><updated>2014-12-12T00:00:00+00:00</updated><entry><title>Finding Longitude &amp; Latitude based on IP</title><link href="http://www.deekras.com/finding-longitude-latitude-based-on-ip.html" rel="alternate"></link><updated>2014-12-12T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-12:finding-longitude-latitude-based-on-ip.html</id><summary type="html">&lt;p&gt;On that &lt;a href="link"&gt;recent project&lt;/a&gt; I was working on, I was looking for the local weather based on where the user is located. So first, &lt;a href="link to post"&gt;I got the IP&lt;/a&gt;. With that IP, I used &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt; to find the longitude and latitude coordinates.  Later, I will use those coordinates to find the local weather.&lt;/p&gt;
&lt;p&gt;First, I downloaded the GeoIP data from &lt;a href="https://pypi.python.org/pypi/pygeoip/"&gt;https://pypi.python.org/pypi/pygeoip/&lt;/a&gt; and unzipped it. And saved the GeoLiteCity.dat on my local server.&lt;/p&gt;
&lt;p&gt;I also had to &lt;code&gt;pip install pygeoip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygeoip&lt;/span&gt;    &lt;span class="c"&gt;# import the pygeoip module&lt;/span&gt;

&lt;span class="n"&gt;geoip_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygeoip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeoIP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/path/GeoLiteCity.dat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_lat_lng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geoip_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_by_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, I used the &lt;strong&gt;record_by_addr(addr)&lt;/strong&gt; attribute since I had the addr, the IP. And I want the full record.&lt;br /&gt;
There are many other attributes you can use with this geoip data. Checkout more at: &lt;a href="http://pygeoip.readthedocs.org/en/v0.3.2/api-reference.html"&gt;http://pygeoip.readthedocs.org/en/v0.3.2/api-reference.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt; is a dictionary. 
And I called the &lt;strong&gt;'latitude'&lt;/strong&gt; and &lt;strong&gt;'longitude'&lt;/strong&gt; keys of &lt;strong&gt;data&lt;/strong&gt; to find the values of lat and lng.&lt;/p&gt;
&lt;p&gt;With the lat and lng, I will be able to get the weather for those coordinates. Using the &lt;strong&gt;forecast_io&lt;/strong&gt;. More on that next time.&lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry><entry><title>Get the public IP of user's computer</title><link href="http://www.deekras.com/get-the-public-ip-of-users-computer.html" rel="alternate"></link><updated>2014-12-11T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-11:get-the-public-ip-of-users-computer.html</id><summary type="html">&lt;p&gt;For a &lt;a href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html"&gt;recent project&lt;/a&gt;, I needed to get the longitude and latitude of where the user was at the time.  And from that data, I could get the local weather.&lt;/p&gt;
&lt;p&gt;To do that, I'd find her local IP and then later use  &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt; to find the coordinates of that IP. (That's another post)&lt;/p&gt;
&lt;p&gt;First, I used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then a fellow HackerSchooler pointed out that sometimes that might get my local host (127.0.0.1) and not the IP as I thought I might get. &lt;/p&gt;
&lt;p&gt;The suggestion was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First attempt to get the IP that way, since it is more 'resources efficient'.&lt;/li&gt;
&lt;li&gt;Also have an if statement to check if it did indeed get me that local host.&lt;/li&gt;
&lt;li&gt;And if it is the localhost, then use icanhazip.com to get the IP.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;span class="c"&gt;#import the request module&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_ip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://icanhazip.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the requests.get statement:&lt;br&gt;
    the &lt;strong&gt;ip&lt;/strong&gt; is the response. It is the &lt;strong&gt;content&lt;/strong&gt; from the &lt;strong&gt;'get'&lt;/strong&gt; request to &lt;strong&gt;"http://icanhazip.com/"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read more about the different attributes for&lt;/em&gt;  requests.get(some_url).attributes
&lt;a href="http://docs.python-requests.org/en/latest/user/quickstart/#make-a-request"&gt;http://docs.python-requests.org/en/latest/user/quickstart/#make-a-request&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;---MORE ABOUT REQUESTS---&lt;/h5&gt;
&lt;p&gt;requests is a more reliable library than the old urllib2&lt;br&gt;
&lt;a href="http://docs.python-requests.org/en/latest/"&gt;http://docs.python-requests.org/en/latest/ &lt;/a&gt; &lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry><entry><title>My first Python project â€¦ and what I learned</title><link href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html" rel="alternate"></link><updated>2014-12-10T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-10:my-first-python-project-and-what-i-learned.html</id><summary type="html">&lt;p&gt;Been working my way through  &lt;a href="http://books.google.com/books/about/Core_Python_Programming.html?id=CUIgM3e-I5gC"&gt;Core Python Programming&lt;/a&gt;. And having lots of  fun.  Learning tons, quickly. Strings, functions, classes, loops, comprehensions, iterables, tuples, and the many attributes and properties of each. And also the libraries.  What cool stuff I could do. When I get past the tutorials.&lt;/p&gt;
&lt;p&gt;But there's nothing like working on real life problems. With peers. And being able to tap into the experience and knowledge of mentors. That is what I got during my stint at &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt; fall 2014.&lt;/p&gt;
&lt;p&gt;In previous jobs, I had worked side by side with the programmers on solutions to our company's needs. So I had an idea of the magic of what computer programmers can do.  And finally, I decided to learn it for myself. And I love it.&lt;/p&gt;
&lt;p&gt;So when I got to Hacker School, even though I didn't have much programming under my belt, I jumped right in.  I started working on a real solution to a small challenge. Nothing fancy, but useful to some people:  Some school teachers were having a hard time determining if it was too cold to go outside to play. They had been given a &lt;a href="https://www.idph.state.ia.us/hcci/common/pdf/weatherwatch.pdf"&gt;chart&lt;/a&gt; with wind-chills and colors indicating how comfortable it would be for outdoor play. They found it confusing and wanted something simpler to understand.  And so I had an idea for my first application.  &lt;/p&gt;
&lt;p&gt;It involved getting the current IP address (using &lt;strong&gt;http://icanhazip.com/&lt;/strong&gt;), and then the corresponding longitude &amp;amp; latitude coordinates (using &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt;) and then finding the current weather using those coordinates (using the &lt;strong&gt;forecast.io&lt;/strong&gt;  weather API).  I wrote it in Python, with Flask. I'll put it up here some day soon.&lt;/p&gt;
&lt;p&gt;Maybe an ambitious project for just starting out. But that is the best part of Hacker School. Tapping into the experiences and help from peers and the facilitators.  Lots of people showed me little tricks and tips to use to build this little application.  And it gave me lots of practice with peer programming and review. I am so grateful to all who helped me muster through the project.&lt;/p&gt;
&lt;p&gt;Once it was working well, I added some extra features to make it even more useful. Like finding the weather based on zip code. For that I used the &lt;strong&gt;zippopotamus&lt;/strong&gt; API (api.zippopotam.us).  I even set it up to send daily emails (using &lt;strong&gt;mailgun&lt;/strong&gt;) and/ or texts (using &lt;strong&gt;twilio&lt;/strong&gt;) to the teachers using the data stored in a SQL database.&lt;/p&gt;
&lt;p&gt;In the end, from this one project, I got to work with JSON files, html, HTTP 'get' and 'post', APIs, lots of the Flask commands. Later, I refactored it to work with SQLAlchemy and WTForms. &lt;/p&gt;
&lt;p&gt;Not bad for my first foray into programming.&lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry></feed>