<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DeeKras.com</title><link href="http://www.deekras.com/" rel="alternate"></link><link href="http://www.deekras.com/feeds/python.atom.xml" rel="self"></link><id>http://www.deekras.com/</id><updated>2015-01-17T00:00:00+00:00</updated><entry><title>Linked Lists</title><link href="http://www.deekras.com/linked-lists.html" rel="alternate"></link><updated>2015-01-17T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2015-01-17:linked-lists.html</id><summary type="html">&lt;h2&gt;Working with linked lists:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First: What is a 'linked list'?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In very short, a linked list is comprised of &lt;code&gt;nodes&lt;/code&gt; that are linked together to create a collection of nodes, in other words a list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what's a node?&lt;/strong&gt;  You can think of it as a nugget of data that contains 2 sections: 
   1 – the data, the value, the cargo (different words for the same thing).&lt;/p&gt;
&lt;p&gt;2 – the pointer, the reference, the 'next' which points to the next node in the linked list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To kind of visualize it ...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;|&lt;/b&gt; val | next &lt;b&gt;|&lt;/b&gt;  ----&amp;gt; &lt;b&gt;|&lt;/b&gt;val   |  None &lt;b&gt;|&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Here, the first node points to the second node. And since there is no third node, the second node doesn't have a next or pointer, so it is &lt;code&gt;None&lt;/code&gt;. Of course, there can be many nodes (with pointers pointing the next node) in a linked list.&lt;/p&gt;
&lt;p&gt;The first node is generally called the &lt;strong&gt;head&lt;/strong&gt; of the linked list. The rest is referred to as the &lt;strong&gt;tail&lt;/strong&gt;.  The entire linked list is referenced by its head.  So usually the head doesn't change  too often, but the tail might. (The head would change if that first node is deleted or changed.)  The head is a node just like the others; it has a value and a next. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to set up a linked list?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We first set up a Node Class and instantiate the &lt;code&gt;val&lt;/code&gt; and the &lt;code&gt;next&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, a simple node can be set up:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;node = Node(4)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This creates an instance of the Node class. 
   - The &lt;code&gt;val&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;. And &lt;code&gt;next&lt;/code&gt; is still at the default of &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;node.val&lt;/code&gt; = 4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;node.next&lt;/code&gt; = None&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several ways to actually set up the nodes and the whole list.  And add or delete or modify the nodes. Here's my preferred way, several methods in the LinkedList class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start off by instantiating the list itself – defining the &lt;code&gt;head&lt;/code&gt; and the &lt;code&gt;tail&lt;/code&gt;. Both start off as &lt;code&gt;None&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here's the method for adding nodes.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this &lt;code&gt;add_node&lt;/code&gt; method, we will set the &lt;code&gt;head&lt;/code&gt; of the list- when adding the first node. If the new node doesn't yet point to anywhere, the &lt;code&gt;next&lt;/code&gt; remains as the default &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With each new node, we set the &lt;code&gt;next&lt;/code&gt; of the previous node – because &lt;em&gt;only now&lt;/em&gt; we know where it will point to. And we add that new node – only the value; the &lt;code&gt;next&lt;/code&gt; will remain &lt;code&gt;None&lt;/code&gt; until it knows where to point to.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;new_node&lt;/code&gt; is an instance of Node.
(ex: if Node(6) then &lt;code&gt;new_node&lt;/code&gt; is 6.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, we see if we need to set the &lt;code&gt;head&lt;/code&gt; or if it was already set.  If &lt;code&gt;head&lt;/code&gt; is still &lt;code&gt;None&lt;/code&gt;, then this &lt;code&gt;new_node&lt;/code&gt; is the head. If it is already set to something, then the head remains the same.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, we check if there is anything in the tail. If there is something other than &lt;code&gt;None&lt;/code&gt; -  meaning that there is a 'previous node' that is waiting to find out what it will point to - then the &lt;code&gt;tail.next&lt;/code&gt; should be set to &lt;code&gt;new_node&lt;/code&gt;.  In other words, we now know where it should point to - to the new node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly, we add the &lt;code&gt;new_node&lt;/code&gt; to the tail of the list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;In other words …&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;col width="80"&gt;
  &lt;col width="80"&gt;
  &lt;col width="80"&gt;
  &lt;col width="80"&gt;
  &lt;col width="80"&gt;
  &lt;center&gt;
  &lt;tr&gt;
    &lt;th&gt;  Node #     &lt;/th&gt;
    &lt;th&gt;  New_node   &lt;/th&gt;
    &lt;th&gt;  Head       &lt;/th&gt;
    &lt;th&gt;  Next       &lt;/th&gt;
    &lt;th&gt;  Tail       &lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;  0          &lt;/td&gt;
    &lt;td&gt;  --         &lt;/td&gt;
    &lt;td&gt;  None       &lt;/td&gt;
    &lt;td&gt;  --         &lt;/td&gt;  
    &lt;td&gt;  None       &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;  1          &lt;/td&gt;
    &lt;td&gt;  6          &lt;/td&gt;
    &lt;td&gt;  6          &lt;/td&gt;
    &lt;td&gt;None  --&gt;8   &lt;/td&gt;
    &lt;td&gt;6            &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt; 2           &lt;/td&gt;
    &lt;td&gt;8            &lt;/td&gt;
    &lt;td&gt;6            &lt;/td&gt;
    &lt;td&gt;None  --&gt;10&lt;/td&gt;
    &lt;td&gt;8&lt;/td&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;None&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
  &lt;/center&gt;
&lt;/table&gt;

&lt;p&gt;When we first instantiate – Node #0, there is no &lt;code&gt;new_node&lt;/code&gt; yet, the &lt;em&gt;head&lt;/em&gt; and &lt;em&gt;tail&lt;/em&gt; are set to &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adding Node #1 = Node(6)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;new_node&lt;/code&gt; = 6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We check if the &lt;code&gt;head&lt;/code&gt; (here shown as row above) is &lt;code&gt;None&lt;/code&gt; and since it is the first added node, it is indeed &lt;code&gt;None&lt;/code&gt;. Then we set the &lt;code&gt;head&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt;.  Which it will be from hereon until we change that first node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We check if the &lt;code&gt;tail&lt;/code&gt; (here shown as row above) is not &lt;code&gt;None&lt;/code&gt;. When adding this first node, it is still &lt;code&gt;None&lt;/code&gt;. So we leave the &lt;code&gt;next&lt;/code&gt;  as &lt;code&gt;None&lt;/code&gt;. When we will add the next node, we will change it (hence the arrow indicating that it was first &lt;code&gt;none&lt;/code&gt; and then when adding the next node, we change the &lt;code&gt;next&lt;/code&gt; to point to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We add the &lt;code&gt;6&lt;/code&gt; to the &lt;code&gt;tail&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we add the second node (the 8), the &lt;code&gt;head&lt;/code&gt; remains the same. We see that the previous &lt;code&gt;tail&lt;/code&gt; now is not equal to None. So we need to add the &lt;code&gt;8&lt;/code&gt; to &lt;code&gt;next&lt;/code&gt; to that previous node.&lt;/p&gt;
&lt;p&gt;And so it goes!&lt;/p&gt;
&lt;p&gt;The last node has a value, and its &lt;code&gt;next&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Now onto searching for something in that linked list&lt;/h2&gt;
&lt;p&gt;The basic idea is that we'll traverse through the linked list until we find what we are looking for.  I've created it as another method of the LinkedList class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We start off by setting the node to the 'head' of the list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And use a 'while loop' to loop through the list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the &lt;code&gt;node.val&lt;/code&gt; matches the searchitem, return that &lt;code&gt;node.val&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And if that &lt;code&gt;node.val&lt;/code&gt; is not the search item, then move to the next node – by setting the node to the &lt;code&gt;node.next&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And if after it goes through all nodes (when it does equal &lt;code&gt;None&lt;/code&gt;) and it still has not been found, return 'not found'.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pretty straight forward. We'll use this as the base for removing nodes.&lt;/p&gt;
&lt;h2&gt;Removing Nodes&lt;/h2&gt;
&lt;p&gt;An important point to remember as we think about removing nodes. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When nothing points to a node, it simply hangs about until Python's 'garbage collection' just throws it out.  So removing the pointer that points to that node is part of the way we remove a node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we simply remove the &lt;code&gt;next&lt;/code&gt;  from a node, then anything after that is also disconnected from the first part of the list and thus lost.  Like those long linked Xmas lights.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The best way to remove a node is to have the pointer that was pointing to it just point to something else, to the next node on the link. So for example if node 4 points to 5, and 5 points to 7, and 7 points to 8. If we want to remove node 7, we can change the pointer of 5 (which currently points to 7) to point to 8. And then nothing points to 7 and it's gone to garbage collection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we traverse the list searching for that node and then point the previous node – that was pointing to the one we want to remove – the next one.  That's the idea.   &lt;/p&gt;
&lt;p&gt;But once we pass the previous node, we can't reference it anymore.  So we have to keep track of the current node and the previous node. &lt;/p&gt;
&lt;p&gt;Here's the code and then I'll explain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;
    &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;previous&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;removed {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We set the node to the head and &lt;code&gt;previous&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;.  We will use this &lt;code&gt;previous&lt;/code&gt; to keep track of the previous node.&lt;/p&gt;
&lt;p&gt;Use a while loop to traverse through the list.
We set the &lt;code&gt;current&lt;/code&gt; to the current node.&lt;/p&gt;
&lt;p&gt;Next, we check if the &lt;code&gt;node.val&lt;/code&gt; is the item we are searching for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;And if it is, then &lt;code&gt;next&lt;/code&gt; of the previous node is now set to th &lt;code&gt;next&lt;/code&gt; of what is the current node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And if it is not, then we move both the previous and the current along the traversal of the list. The previous gets the value of the current one. And the &lt;code&gt;current&lt;/code&gt; gets the value from the &lt;code&gt;next&lt;/code&gt;. Until it is found. Or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works great for searching any item in the list, or even something not in the list.  But if the search item is the very first node – the head, then there is no &lt;code&gt;previous&lt;/code&gt; as there simply is no previous. And also we set it to &lt;code&gt;None&lt;/code&gt;. So the line &lt;code&gt;previous.next = current.next&lt;/code&gt; won't work since &lt;code&gt;previous&lt;/code&gt; is None, it can't have the &lt;code&gt;next&lt;/code&gt; attribute. You'll get this error: &lt;code&gt;AttributeError: 'NoneType' object has no attribute 'next'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's a solution.  Add these lines before the &lt;code&gt;while&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;removed {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the item == the &lt;code&gt;self.head.val&lt;/code&gt; (the val of the first node), then we have found the node to be removed. But before we remove it, we need to set the new head. So  the &lt;code&gt;node.next&lt;/code&gt; of that node, of the &lt;code&gt;self.head&lt;/code&gt; will be the new &lt;code&gt;self.head&lt;/code&gt;.  And we jump out of the method.  (Read it slowly a second time, it does make sense.)&lt;/p&gt;</summary></entry><entry><title>SQLAlchemy and Relationship</title><link href="http://www.deekras.com/sqlalchemy-and-relationship.html" rel="alternate"></link><updated>2014-12-22T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-22:sqlalchemy-and-relationship.html</id><summary type="html">&lt;h2&gt;Moving along with SQLAlchemy and ... Relationships&lt;/h2&gt;
&lt;p&gt;Most of programming is not a simple flat table. Mostly, there are several tables, and there is something that links them - the tables have relationships.&lt;/p&gt;
&lt;p&gt;So going back to the small membership program from the &lt;a href="link"&gt;previous post&lt;/a&gt;, let's add a purchases table, where we can keep track of all purchases each member makes.  The two tables are linked by the &lt;code&gt;member_id&lt;/code&gt;. They have a relationship.&lt;/p&gt;
&lt;p&gt;Each member can have several purchases.  The one member can have many purchases. That is a &lt;strong&gt;one-to-many relationship&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Let's set that up in SQLAlchemy:&lt;/h3&gt;
&lt;p&gt;This is the Member class we set up last time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;members&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;member_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inquiry_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;active__date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inactive__date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we will set up the Purchase class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Purchase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;purchases&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;purchase_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;member_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;members.member_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;item_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;purchase_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;purchase_amt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's go back to the Member class and add the relevant code to the bottom.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;purchases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Purchase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;members&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we have to add a bit to the &lt;code&gt;imports&lt;/code&gt; - &lt;code&gt;relationship&lt;/code&gt;, &lt;code&gt;backref&lt;/code&gt;, &lt;code&gt;ForeignKey&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Explanations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Purchase class is pretty straightforward. It is based on the &lt;code&gt;Base&lt;/code&gt; class and it has a primary key. The interesting piece is in the args of &lt;code&gt;member_id&lt;/code&gt;.  Remember, the &lt;code&gt;member_id&lt;/code&gt; is the one field that both tables share; it creates the relationship. So we have to state that somehow.(More about &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/orm/basic_relationships.html"&gt;relationships&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;purchases&lt;/code&gt; table is a 'child' of the &lt;code&gt;members&lt;/code&gt; table, which is its parent.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;member_id = Column(Integer, ForeignKey('members.member_id'))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Integer&lt;/code&gt;: The data type must be the same in both tables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ForeignKey('members.member_id')&lt;/code&gt; : This states that it is the 'child' of the &lt;code&gt;members&lt;/code&gt; table, specifically linked to the &lt;code&gt;member_id&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;It is linked to the field in the &lt;code&gt;members&lt;/code&gt; table, not the &lt;code&gt;Member&lt;/code&gt; class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;purchases = relationship("Purchase", backref="members")&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the link to the 'child'. The &lt;code&gt;relationship&lt;/code&gt; is on the 'parent' class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backref&lt;/code&gt;. This establishes the bi-directional relationship - from the many to the one, from the child to the parent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backref&lt;/code&gt; is a shortcut for creating the relationship instead of creating the relationships in  both classes. Much more about &lt;a href="http://docs.sqlalchemy.org/en/latest/orm/backref.html"&gt;backref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This establishes &lt;code&gt;Member.purchases&lt;/code&gt;; purchases is an attribute of Member class.&lt;/li&gt;
&lt;li&gt;And it also establishes &lt;code&gt;Purchase.member&lt;/code&gt;; `member is an attribute of Purchase class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now the relationships between the 2 tables has been established.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Queries for tables with relationships&lt;/h3&gt;
&lt;p&gt;Let's say we want to know who purchased what.  We need the name data from the &lt;strong&gt;members&lt;/strong&gt; table and the purchase data from the &lt;strong&gt;purchases&lt;/strong&gt; table.  We need a query that somehow pulls from both tables.  There are some query(args) for that.&lt;/p&gt;
&lt;p&gt;Here's a simple query of 2 tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;items_purchased_by_purchaser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;purchases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                        &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                        &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                        &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;purchases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchase_date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;both classes are included in the args of the query.&lt;/li&gt;
&lt;li&gt;the filter is when &lt;code&gt;member_id&lt;/code&gt; in the &lt;code&gt;Member&lt;/code&gt; class is equal to the &lt;code&gt;member_id&lt;/code&gt; in the Purchase class.&lt;/li&gt;
&lt;li&gt;in the &lt;code&gt;for&lt;/code&gt; statement,  the order of the 2 variables matters. It must be in the same order that the classes were listed in the args.  (Member is first, so the object that will hold all Member's attributes must be first)&lt;/li&gt;
&lt;li&gt;it uses &lt;code&gt;order_by&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and it returns all results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Here is another function that will have the same results&lt;/strong&gt; - another way to write the query. Using a &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;items_purchased_by_purchaser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;purchases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;purchases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchase_date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;join&lt;/code&gt; works because the relationship has already been declared previously when we created the classes.&lt;/li&gt;
&lt;li&gt;include both classes in the query(paren)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;And one more way to write the query.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;items_purchased_by_purchaser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;purchases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
                &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;purchases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purchase_date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Basic SQLAlchemy</title><link href="http://www.deekras.com/basic-sqlalchemy.html" rel="alternate"></link><updated>2014-12-20T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-20:basic-sqlalchemy.html</id><summary type="html">&lt;h2&gt;First, why SQLAlchemy is powerful.&lt;/h2&gt;
&lt;p&gt;There's a whole set of features of SQLAlchemy listed in their &lt;a href="http://www.sqlalchemy.org/features.html"&gt;docs&lt;/a&gt;. I have found that using SQLAlchemy instead of SQLlite has made it much easier to access the data, since data is saved as a class. And writing methods and queries on that data is simpler than straight up SQL.&lt;/p&gt;
&lt;h2&gt;And now to jump right in...&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The imports:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;To set things up:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#at the global level&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sqlite:///membership.db&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;#your database&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="c"&gt;#create tables&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Some explanations:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are all set at the global level.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;db = 'sqlite:///membership.db'&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;naming the database and where it resides&lt;/li&gt;
&lt;li&gt;you can name it anything. &lt;code&gt;db&lt;/code&gt; is good too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;engine = create_engine(db)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;engine&lt;/strong&gt; is the 'home base' for the database - it contains the path to the database and some information about the dialect (there are other arguments too).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_engine()&lt;/code&gt; creates a new Engine instance called &lt;code&gt;engine&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;you can name it anything. &lt;code&gt;engine&lt;/code&gt; is convention.&lt;/li&gt;
&lt;li&gt;(Much more about &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html"&gt;engines&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Base = declarative_base()&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;declarative&lt;/strong&gt; creates a new base class which all classes based on it will inherit. (See below when we create the &lt;code&gt;Member&lt;/code&gt; class.)&lt;/li&gt;
&lt;li&gt;you can name it anything. &lt;code&gt;Base&lt;/code&gt; is convention.&lt;/li&gt;
&lt;li&gt;(Much more about &lt;a href="http://docs.sqlalchemy.org/en/rel_0_8/orm/extensions/declarative.html"&gt;declaratives&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Session = sessionmaker(bind=engine)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;session&lt;/strong&gt; is a 'holding zone' for all the conversations between the program and the database. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sessionmaker(bind=engine)&lt;/code&gt; creates the Session object. And binds it to the &lt;code&gt;engine&lt;/code&gt;; in this way the session knows how to connect to the database it is working with.&lt;/li&gt;
&lt;li&gt;you can name it anything. &lt;code&gt;Session&lt;/code&gt; is convention.&lt;/li&gt;
&lt;li&gt;(Much more about &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/orm/session_basics.html#what-does-the-session-do"&gt;sessions&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;session = Session()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create the 'session'&lt;/li&gt;
&lt;li&gt;you can name it anything.  *NOTE if you are also working with Flask which has a &lt;code&gt;session&lt;/code&gt; object, things may get confusing; name this something else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Base.metadata.create_all(engine)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;after the tables are created&lt;/em&gt;, still need to create it in the &lt;code&gt;engine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;we are creating the tables in the 'engine' and linking it to be saved as the &lt;code&gt;metadata&lt;/code&gt; of the &lt;code&gt;Base&lt;/code&gt; class.
     -(&lt;code&gt;metadata&lt;/code&gt; is the structure of the data - ie: the fields and types )&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Here's a little example using the very basics of SQLAlchemy.&lt;/h3&gt;
&lt;p&gt;A quick background to what this little program is about: This program is a webform. (At this point, using regular Flask forms. Will refactor to use WTForms.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new user &lt;em&gt;inquires&lt;/em&gt; about membership.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;She fills in some basic info about herself.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;member_id&lt;/code&gt; is automatically set.  [This will be done with the &lt;code&gt;autoincrement&lt;/code&gt;. See below.]&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;inquiry_date&lt;/code&gt; is set to current date/ time. [This will be done with the &lt;code&gt;default&lt;/code&gt; set to current time. See below.]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The inquirer becomes a member (activate).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;She adds some more info (password, etc.).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;active_date&lt;/code&gt; is set to current date/ time. [This will be done in the &lt;code&gt;activate&lt;/code&gt; method. See below.]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_active&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. [This will be done in the &lt;code&gt;activate&lt;/code&gt; method. See below.]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The active member can unsubscribe (deactivate).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;inactive_date&lt;/code&gt; is set to current date/ time. [This will be done in the &lt;code&gt;deactivate&lt;/code&gt; method. See below.]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_active&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. [This will be done in the &lt;code&gt;deactivate&lt;/code&gt; method. See below.]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;So now, let's set up the Class:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;members&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;member_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inquiry_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;active__date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inactive__date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Class&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class is based on the &lt;code&gt;Base&lt;/code&gt; object declared above.  &lt;/li&gt;
&lt;li&gt;It must contain the &lt;code&gt;__tablename__&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;And at least one column that is the primary key, in this example, it is &lt;code&gt;member_id&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;About &lt;code&gt;primary_key&lt;/code&gt;:  A primary key is unique. That is no other row in that column has the same data.  It is the field that identifies the row as unique.  In this example, each member has a unique member_id. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Fields&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The syntax is: &lt;code&gt;field_name = Column(args, kwargs)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are several different &lt;strong&gt;data types&lt;/strong&gt; (ex: DateTime, String, Boolean, Float, Integer, Text and others. Must import each type that will be used, as we did above.)&lt;/li&gt;
&lt;li&gt;(Much more about &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/core/type_basics.html"&gt;columns and data types&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;There are several &lt;strong&gt;args&lt;/strong&gt; that can be used (ex: default, autoincrement, index, nullable and others)&lt;/li&gt;
&lt;li&gt;Much more about the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/core/metadata.html#column-table-metadata-api"&gt;rest of the args&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;And now to add some methods to the &lt;code&gt;Member&lt;/code&gt; class:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deactivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inactive_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;session.add(self)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This method will (attempt to) create a new row in the database and add the data to that row.  The &lt;code&gt;primary_key&lt;/code&gt; must be unique. In this case, it is unique, since we are using &lt;code&gt;autoincrement&lt;/code&gt; to create the &lt;code&gt;member_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We can use &lt;code&gt;add_all([list of new rows])&lt;/code&gt; to create several rows at once.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VERY IMPORTANT!&lt;/strong&gt; Later when we actually call any of these methods that make changes (additions, changes or deletions) to the database, we will also have to &lt;code&gt;commit()&lt;/code&gt; it, or the data will not be saved. &lt;code&gt;session.commit()&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So for example, the user is on the 'I'm interested' page and enters her last name, first name and email address and then hits 'submit'.  The function might be something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_inquiry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;email_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;email_address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_to_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Explanations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is when the user comes to the website for the first time and is interested.
She enters her last name, first name and email address and then 'submit'.&lt;/p&gt;
&lt;p&gt;When 'submit' is hit, the fun begins.
   - the data is collected from the form (request.form['field'])
   - an instance of the Member class is created with these fields. 
     - AND the &lt;code&gt;member_id&lt;/code&gt; is created; remember it was set as &lt;code&gt;autoincrement&lt;/code&gt;. 
     - AND the &lt;code&gt;inquiry_date&lt;/code&gt; is set to &lt;code&gt;now()&lt;/code&gt;; that is its &lt;code&gt;default&lt;/code&gt;.
   - the &lt;code&gt;add_to_db()&lt;/code&gt; method is called. This will add all these fields as a new row in the table.
   - LASTLY and IMPORTANTLY, this row which is sitting in the 'holding zone' of the &lt;code&gt;session&lt;/code&gt; gets a commit().  If the session is not committed, the data will sit there until it is committed or lost when a new session begins.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Using queries&lt;/h3&gt;
&lt;p&gt;It is interesting to see your data.  For that we use queries.  Of course, there are lots of other uses for queries. Here is a super simple query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_members&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cell_phone&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic syntax for a query in SQLAlchemy is:
&lt;code&gt;session.query(whatever you are searching)&lt;/code&gt; *This will need a 'return results' argument at the end. See below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;session&lt;/code&gt; is the same 'session' that we declared at the very beginning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can search through a class &lt;code&gt;session.query(Member)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Or you can list a few fields &lt;code&gt;session.query(Member.last_name, Member.first_name)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;There are many different arguments for the &lt;code&gt;query&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Return results&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the very end - which indicates how many results to return - you can use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.all()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns all results. As a list of tuples.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.first()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns the first result. As a tuple.&lt;/li&gt;
&lt;li&gt;if there were no results, returns &lt;code&gt;None&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.limit(limit)&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns the 'limit' number of rows. As a list of tuples.&lt;/li&gt;
&lt;li&gt;ex: &lt;code&gt;limit(3)&lt;/code&gt; will return 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.one()&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns exactly one result. As a tuple.&lt;/li&gt;
&lt;li&gt;if there are more results than 1, raises &lt;code&gt;MultipleResultsFound&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if there were no results, raises &lt;code&gt;NoResultFound&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.scalar()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns the first column of the first result ex: &lt;code&gt;session.query(Item.id, Item.name).scalar()&lt;/code&gt; will return just the value of Item.id (the first column)&lt;/li&gt;
&lt;li&gt;if there are more results than 1, raises &lt;code&gt;MultipleResultsFound&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if there were no results, returns &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other more common arguments are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.filter()&lt;/code&gt; or &lt;code&gt;.filter_by()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;criterion to filter results&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; uses SQL expressions and is more pythonic. So uses &lt;code&gt;==&lt;/code&gt; (double equal). ex: &lt;code&gt;.filter(Member.last_name == 'Silver')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_by&lt;/code&gt; uses keyword expressions. So uses &lt;code&gt;=&lt;/code&gt; (single equal). ex: &lt;code&gt;.filter_by(Member.last_name = 'Silver')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use a comma to add more criteria, ex: &lt;code&gt;.filter(Member.last_name == 'Silver', Member.first_name = 'Mark')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.order_by()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the results will be sorted in the order specified. ex: &lt;code&gt;.order_by(Member.active_date)&lt;/code&gt; will be sorted by &lt;code&gt;active_date&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.group_by&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the results will be grouped by the criterion. returns a set, based on the columns indicated. ex: &lt;code&gt;.group_by(Member.active_date)&lt;/code&gt; will group by &lt;code&gt;active_date&lt;/code&gt; and return one row for each active date in the table, even if there are many of the same active date in the table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.count()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns a count (the number) of rows this query would return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And then there are a whole set of different types of 'joins' for working with 2 tables that have a relationship. Will explore these in a separate post about relationships between tables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Another method to look at (uses a simple query)&lt;/h3&gt;
&lt;p&gt;```
def deactivate():
    email_address = request.form['email_address']   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;member = session.query(Member).\
                     filter_by(Member.email_address=email_address).\
                     One()

member.deactivate()
session.commit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Explanations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is when the user wants to unsubscribe. She enters her email and clicks 'unsubscribe'.&lt;/p&gt;
&lt;p&gt;It all happens when 'unsubscribe' is clicked.
   - get the email address
   - the query then searches for the ONE record where &lt;code&gt;Member.email_address&lt;/code&gt; is equal to the email address from the form.
   - and then calls the &lt;code&gt;deactivate&lt;/code&gt; method from the Member class.
   - and finally commits it.
     If the session is not committed, the data will sit there until it is committed or lost when a new session begins.&lt;/p&gt;
&lt;p&gt;That's the very very basic. It gets much more interesting and useful, when we start adding relationships between the tables. And making the queries a bit more complex.  More next time.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Some very basics about how it works.&lt;/h3&gt;
&lt;p&gt;Some very important points &lt;a href="http://alextechrants.blogspot.com/2013/11/10-common-stumbling-blocks-for.html"&gt;here&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Recursions and Lists and Slices</title><link href="http://www.deekras.com/recursions-and-lists-and-slices.html" rel="alternate"></link><updated>2014-12-18T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-18:recursions-and-lists-and-slices.html</id><summary type="html">&lt;h2&gt;Recursions on lists .. with slices&lt;/h2&gt;
&lt;p&gt;Following up on my &lt;a href="http://www.deekras.com/some-simple-recursive-functions.html"&gt;post about recursions&lt;/a&gt;.  This time about recursive functions using a list. &lt;/p&gt;
&lt;p&gt;So here's where slices gets really useful.&lt;/p&gt;
&lt;p&gt;As a quick reminder about slices:
Slices allow you to get a substring from a string or part of a list.
The syntax is string_or_list(start, end, step)
&lt;a href="https://docs.python.org/2/tutorial/introduction.html"&gt;More about slices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some examples&lt;/p&gt;
&lt;p&gt;word = 'abcdefghij'&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;th&gt;e&lt;/th&gt;
&lt;th&gt;f&lt;/th&gt;
&lt;th&gt;g&lt;/th&gt;
&lt;th&gt;h&lt;/th&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;j&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;*Notice that there are 10 positions here. Starting with 0.  ('a' is in the 1st position. 'j' is in the 10th position.)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;syntax&lt;/th&gt;
&lt;th&gt;result&lt;/th&gt;
&lt;th&gt;explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;word[0]&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;# index 1st position&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[-2]&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;# index 2nd to last position&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[7]&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;# index 8th position&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[7:9]&lt;/td&gt;
&lt;td&gt;hi&lt;/td&gt;
&lt;td&gt;# slice FROM 8th position UNTIL 10th position (not inclusive) 8th &amp;amp; 9th (indexes 7,8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[:6]&lt;/td&gt;
&lt;td&gt;abcdef&lt;/td&gt;
&lt;td&gt;# slice FROM BEGINNING until 7th position (indexes 0-6)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[5:]&lt;/td&gt;
&lt;td&gt;fghij&lt;/td&gt;
&lt;td&gt;# slice FROM 6th position until END (indexes 5--&amp;gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[::3]&lt;/td&gt;
&lt;td&gt;adgj&lt;/td&gt;
&lt;td&gt;# slice FROM BEGINNING until END, STEP 3  (indexes 0,3,6,9)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word[3::2]&lt;/td&gt;
&lt;td&gt;dfhj&lt;/td&gt;
&lt;td&gt;# slice from 4th position until end, STEP 2 (3,5,7,9)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;One way to remember how slices work is to think of the indices as pointing &lt;strong&gt;between characters&lt;/strong&gt;, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, so that's about slices.  Here's why slices work so well with recursive.&lt;/p&gt;
&lt;p&gt;Let's work with &lt;code&gt;word = 'abcdefghij'&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First time around &lt;code&gt;word[0]&lt;/code&gt; is&lt;code&gt;'a'&lt;/code&gt; and &lt;code&gt;word[1:]&lt;/code&gt; is &lt;code&gt;'bcdefghij'&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second time around - &lt;code&gt;word&lt;/code&gt; is the previous &lt;code&gt;word[1:]&lt;/code&gt;. So &lt;code&gt;word[0]&lt;/code&gt; is &lt;code&gt;'b'&lt;/code&gt; and &lt;code&gt;word[1:]&lt;/code&gt; is now &lt;code&gt;'cdefghij'&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep looping until there there are no letters left in &lt;code&gt;word&lt;/code&gt; and then &lt;code&gt;word[]==""&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's see that in action.  Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abcdefghij&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_letters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;word: &amp;quot;{}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hit the base case. the end&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;in the &amp;#39;else statement&amp;#39;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;print_letters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

&lt;span class="n"&gt;print_letters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what happened here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each recursion starts off by printing what &lt;code&gt;word&lt;/code&gt; looks like now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then it checks for the 'base case', the exit of the loop.  Here it is   &lt;code&gt;if word == "":&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not the 'base case', then the recursion happens.  Here, it is the same function with a new &lt;code&gt;word&lt;/code&gt; - the &lt;code&gt;word[1:]&lt;/code&gt; in the return.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And it loops and loops until it hits the 'base case' and exits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That was a simple examples using slices and strings. Here's another with lists.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largest_so_far&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;largest_so_far&lt;/span&gt;

    &lt;span class="n"&gt;next_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;largest_so_far&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;largest_so_far&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;largest_so_far&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;largest_so_far&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;largest_so_far&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what's happening here. &lt;/p&gt;
&lt;p&gt;This function seeks to find the largest number in the list.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def max(numbers, largest_so_far=0):&lt;/code&gt; : We define the function called &lt;code&gt;max&lt;/code&gt; with 2 arguments:  &lt;code&gt;numbers&lt;/code&gt;, which is the list of numbers from which to find the largest number. And &lt;code&gt;largest_so_far&lt;/code&gt; in which we will hold onto the 'largest number found up to that point' and we start it with a default of &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ext_num = numbers[0]&lt;/code&gt; : Which number in the list are we comparing? It is always the first number of the new list. See the 'else statement' where we make the make the new argument for the recursive function &lt;code&gt;numbers[1:]&lt;/code&gt;. It is the previous list - but from the second position.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if numbers == []:&lt;/code&gt; : This is the base case, the exit of the loop. If there are no more numbers, then the &lt;code&gt;largest_so_far&lt;/code&gt; is the largest number. The end!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if next_num &amp;gt; largest_so_far:&lt;/code&gt; : if &lt;code&gt;next_num&lt;/code&gt; is larger than &lt;code&gt;largest_so_far&lt;/code&gt;, then ...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return max(numbers[1:], largest_so_far=next_num)&lt;/code&gt; : do this function again - with the arguments: &lt;code&gt;numbers[1:]&lt;/code&gt; and &lt;code&gt;largest_so_far=next_num&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;else:&lt;/code&gt; : if &lt;code&gt;next_num&lt;/code&gt; is not larger (is equal to or less than), then ...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return max(numbers[1:], largest_so_far=largest_so_far)&lt;/code&gt; : call the recrusive function again - like above, but leave the &lt;code&gt;largest_so_far&lt;/code&gt; as is.&lt;/p&gt;
&lt;p&gt;And the loop continues until hits base case.&lt;/p&gt;</summary></entry><entry><title>Some simple recursive functions</title><link href="http://www.deekras.com/some-simple-recursive-functions.html" rel="alternate"></link><updated>2014-12-17T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-17:some-simple-recursive-functions.html</id><summary type="html">&lt;h2&gt;So how do recursions work?&lt;/h2&gt;
&lt;p&gt;I hear so much about recursions. They're supposedly in all interview questions.  So here's my attempt at trying to make them easy to understand.&lt;/p&gt;
&lt;p&gt;A recursive function is a function that calls itself. I'll throw in a simple example. The factorial.&lt;/p&gt;
&lt;p&gt;The factorial of 5 = 5 x 4 x 3 x 2 x 1.  What is happening here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first, 5 is multiplied by 5-1 (in other words 4) = 20&lt;/li&gt;
&lt;li&gt;then,  that result (20) is multiplied by 4-1 (3)  = 60 &lt;/li&gt;
&lt;li&gt;then,  that result (60) is multiplied by 3-1 (2) = 120&lt;/li&gt;
&lt;li&gt;lastly,  that result (120) is multiplied by 2-1 (1) = 120&lt;/li&gt;
&lt;li&gt;and it's over. We have the result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a repetetive pattern here - the result is multiplied by (the number - 1) &lt;code&gt;n * (n-1)&lt;/code&gt;. That's where the recursive function comes in.&lt;/p&gt;
&lt;p&gt;Here is what the function might look like. I put in lots of print statements so you can see what is happening at each point.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NOW: We&amp;#39;re (back) at the beginning of the function. n = {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--- HIT THE BASE CASE&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NOW: the return is 1.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--- WILL START GOING BACK UP THE LADDER&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;   NOW: We&amp;#39;re in the &amp;#39;else statement&amp;#39;. n = {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;NOW: The interim result (the previous &amp;#39;return&amp;#39;) is {result_was} and n = {n}.  &lt;/span&gt;
&lt;span class="s"&gt;              So {result_was} * {n} = {result}.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_was&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;   The NEW interim result (the current &amp;#39;return&amp;#39;) based on this recursion is:  {}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;strong&gt;So what is happening here?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Let's look at the key line &lt;code&gt;result =  n * factorial(n-1)&lt;/code&gt;. The number &lt;code&gt;n&lt;/code&gt; is being multiplied by ... the result of the same function &lt;code&gt;factorial(n-1)&lt;/code&gt;.  In other words, a loop of the function calling itself.&lt;/p&gt;
&lt;p&gt;Let's look at the construct of the rest of the function and we'll come back to that line.   We start off with &lt;code&gt;if n &amp;lt;= 0:  return 0&lt;/code&gt;. For this function, we don't want to deal with negative numbers or 0. So if the argument is 0 or less, it returns a 0 and that is the end.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;code&gt;if n == 1: return 1&lt;/code&gt;. If the argument of the function is 1, it returns a 1 and that is the end. This line also plays an important role in the overall function. Every recursive function &lt;strong&gt;must have an end to the loop*&lt;/strong&gt;, or it will go on in an infinite loop.  So in this case, if the number is equal to 1, it stops the recursion with a &lt;code&gt;return 1&lt;/code&gt; and then the function finishes up the rest of its work.  (*This is also referred to as the 'base case' - when a problem can be solved without further recursion.)&lt;/p&gt;
&lt;p&gt;Now, let's go back and look at the crux of this function &lt;code&gt;result =  n * factorial(n-1)&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; is to be multiplied by what? a function. (Of course, we can call functions in a function). In this case, it is calling the same function, with a different argument &lt;code&gt;n - 1&lt;/code&gt;. So &lt;code&gt;n&lt;/code&gt; will wait until it knows what it should be multiplied with; it will wait for the &lt;code&gt;return&lt;/code&gt; of that function. &lt;/p&gt;
&lt;p&gt;Here is where it gets interesting. That function will then call itself again. &lt;code&gt;n&lt;/code&gt; waits for a &lt;code&gt;return&lt;/code&gt;. And since this is a recursion, there is also a new &lt;code&gt;n&lt;/code&gt; and that one also waits for a &lt;code&gt;return&lt;/code&gt;. And the recursive loop goes on  and on - until it hits its 'base case'. And then the &lt;code&gt;return&lt;/code&gt;s are all in and the &lt;code&gt;n&lt;/code&gt;s can do their multiplication and be done with it.&lt;/p&gt;
&lt;p&gt;In other words, &lt;strong&gt;the recursive loop goes down the ladder and all the &lt;code&gt;n&lt;/code&gt;s wait for their corresponding &lt;code&gt;return&lt;/code&gt; - until it hits its 'base case', its absolute bottom.  And then it goes back up the ladder.&lt;/strong&gt; The most recent &lt;code&gt;return&lt;/code&gt; is multiplied to the lowest &lt;code&gt;n&lt;/code&gt;, the most recent &lt;code&gt;n&lt;/code&gt;. And the &lt;code&gt;return&lt;/code&gt; of that multiplication is multiplied to the next lowest &lt;code&gt;n&lt;/code&gt;. And so on until it reaches the top. And we have our final &lt;code&gt;return&lt;/code&gt;. That is the result of the function.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Let's see that in action. &lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Here is the result of the above function - with all the print statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;re (back) at the beginning of the function. n = 3&lt;/span&gt;
&lt;span class="s1"&gt;   NOW: We&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else statement&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;re (back) at the beginning of the function. n = 2&lt;/span&gt;
&lt;span class="s1"&gt;   NOW: We&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else statement&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;re (back) at the beginning of the function. n = 1&lt;/span&gt;
&lt;span class="s1"&gt;--- HIT THE BASE CASE&lt;/span&gt;
&lt;span class="s1"&gt;NOW: the return is 1.&lt;/span&gt;
&lt;span class="s1"&gt;--- WILL START GOING BACK UP THE LADDER&lt;/span&gt;
&lt;span class="s1"&gt;NOW: The interim result (the previous &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;) is 1 and n = 2.  So 1 * 2 = 2.&lt;/span&gt;
&lt;span class="s1"&gt;   The NEW interim result (the current &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;) based on this recursion is:  2.&lt;/span&gt;
&lt;span class="s1"&gt;NOW: The interim result (the previous &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;) is 2 and n = 3.  So 2 * 3 = 6.&lt;/span&gt;
&lt;span class="s1"&gt;   The NEW interim result (the current &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;recursion&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out the flow of this function using &lt;a href="http://pythontutor.com/"&gt;pythontutor.com&lt;/a&gt;:  Click on the forward button to see what is happening step by step.
&lt;iframe width="800" height="500" frameborder="0" src="http://pythontutor.com/iframe-embed.html#code=def+factorial(n)%3A%0A++++print+%22NOW%3A+We're+(back)+at+the+beginning+of+the+function.+n+%3D+%7B%7D%22.format(n)%0A++++if+n+%3C%3D+0%3A%0A++++++++return+0%0A++++if+n+%3D%3D+1%3A%0A++++++++print+%22---+HIT+THE+BASE+CASE%22%0A++++++++print+%22NOW%3A+the+return+is+1.%22%0A++++++++print+%22---+WILL+START+GOING+BACK+UP+THE+LADDER%22%0A++++++++return+1%0A++++else%3A%0A++++++++print+%22+++NOW%3A+We're+in+the+'else+statement'.+n+%3D+%7B%7D%22.format(n)%0A++++++++result+%3D++n+*+factorial(n-1)%0A++++++++print+%22%22%22NOW%3A+The+interim+result+(the+previous+'return')+is+%7Bresult_was%7D+and+n+%3D+%7Bn%7D.++%0A++++++++++++++So+%7Bresult_was%7D+*+%7Bn%7D+%3D+%7Bresult%7D.%22%22%22.format(result_was%3Dresult/n,+n%3Dn,+result%3Dresult)%0A++++++++print+%22+++The+NEW+interim+result+(the+current+'return')+based+on+this+recursion+is%3A++%7B%7D.%22.format(result)%0A++++++++return+result%0A%0Aprint+factorial(3)&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;drawParentPointers=false&amp;textReferences=false&amp;showOnlyOutputs=false&amp;py=2&amp;rawInputLstJSON=%5B%5D&amp;curInstr=0&amp;codeDivWidth=350&amp;codeDivHeight=400"&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;So what is happening here - step by step?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Firstly, we start the function at the beginning and n = 3. Since &lt;code&gt;n&lt;/code&gt; does not meet the 'if statements', it goes to the 'else statement'.  That's where it finds &lt;code&gt;result =  n * factorial(n-1)&lt;/code&gt; and it calls the &lt;code&gt;factorial&lt;/code&gt; function, this time with &lt;code&gt;n-1&lt;/code&gt; as the argument, as &lt;code&gt;factorial(2)&lt;/code&gt;. And the 3 waits to find out what it will be multiplied by - what is the result of &lt;code&gt;factorial(2)&lt;/code&gt;? The loop begins.&lt;/p&gt;
&lt;p&gt;Now the &lt;code&gt;n&lt;/code&gt; is 2. And it too wants to know what to be multiplied by and waits for the results of &lt;code&gt;factorial(1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And now finally, &lt;code&gt;n&lt;/code&gt; does equal 1. It has hit 'base case' and returns 1. The &lt;code&gt;return&lt;/code&gt; = 1. Now it goes 'back up the ladder; now the multiplication can begin! &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;n&lt;/code&gt; is then multiplied by that previous &lt;code&gt;return&lt;/code&gt;. So &lt;code&gt;n&lt;/code&gt; * &lt;code&gt;return&lt;/code&gt;  = &lt;code&gt;new return&lt;/code&gt;.  2 * 1 = 2. &lt;/p&gt;
&lt;p&gt;That result, the 2, is the new &lt;code&gt;return&lt;/code&gt; that the 3 is waiting for.  So again &lt;code&gt;n&lt;/code&gt; * &lt;code&gt;return&lt;/code&gt;  = &lt;code&gt;new return&lt;/code&gt;. 3 * 2 = 6. &lt;/p&gt;
&lt;p&gt;And 6 is our final &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the code without all the extras.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WOW! That was long. But I hope that is clear. &lt;strong&gt;In very short... The recursion goes down until it hits base case. And then goes up doing the function using the &lt;code&gt;return&lt;/code&gt; from the previous step.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;more: 
http://www.python-course.eu/recursive_functions.php&lt;/p&gt;</summary></entry><entry><title>Decorators with *args, **kwargs</title><link href="http://www.deekras.com/decorators-with-args-kwargs.html" rel="alternate"></link><updated>2014-12-16T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-16:decorators-with-args-kwargs.html</id><summary type="html">&lt;h2&gt;Decorators: Decorators - with *args and **kwargs&lt;/h2&gt;
&lt;p&gt;This post builds on my previous one about &lt;a href="http://www.deekras.com/working-with-decorators.html"&gt;Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we have the decorator that 'prettifies' the date returned from the original function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pretty_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;getting the date from function: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;got the date: {} (before it was formatted)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:%Y}_{0:%m}_{0:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;@pretty_date&lt;/code&gt; decorator can be used with &lt;strong&gt;any function&lt;/strong&gt; that returns a date, no matter how that date is calculated. As long as it is in a format that the &lt;code&gt;return '{0:%Y}_{0:%m}_{0:%d}'.format(date)&lt;/code&gt; can evaluate.&lt;/p&gt;
&lt;p&gt;But what if the original function needs some arguments in order for it to get the date?  Yes, those arguments can be passed through the decorator to the function.  It's rather simple. Just use *args and **kwargs.  &lt;a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"&gt;Read more about *args and **kwargs.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let's say we have this function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;date_into_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;/%Y&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date_format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It has 2 arguments: a &lt;code&gt;date&lt;/code&gt; and numbers of &lt;code&gt;days&lt;/code&gt; into the future.   All it does is add the number of days to the original date. And then later we want to 'prettify' it with the &lt;code&gt;@pretty_date&lt;/code&gt; decorator.&lt;/p&gt;
&lt;p&gt;Or we have this function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;date_in_past&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{}/{}/{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;/%Y&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date_format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function has 4 arguments. The first 3 are positional, the last is a keyword argument. OK, this is just for &lt;strike&gt;argument&lt;/strike&gt; learning sake.  This function gets a date and subtracts a number of days from it. And then of course, we want to 'prettify' it.&lt;/p&gt;
&lt;p&gt;These and the other functions from the previous post all can be decorated with the same &lt;code&gt;@pretty_date&lt;/code&gt; decorator.  But since they all have different amounts of args and even kwargs, we have to design the decorator to be able to handle all possible functions that might be wrapped by it.&lt;/p&gt;
&lt;p&gt;Here's the revised decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pretty_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;getting the date from function: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;the date: {} (before it was formatted)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:%Y}_{0:%m}_{0:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; in the &lt;code&gt;def wrapper(*args, **kwargs)&lt;/code&gt; and again in the &lt;code&gt;date = func(*args, **kwargs)&lt;/code&gt;.  They are included in the wrapper and then passed to the original function. Which of course uses those arguments to get the date.&lt;/p&gt;
&lt;p&gt;And that's it!  You can use this decorator with many different functions - whether they do or do not have &lt;code&gt;args&lt;/code&gt; or &lt;code&gt;kwargs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's how you might call these 2 functions. (Remember, once the functions are wrapped with the decorator, they are always wrapped. So when we call the function, they are automatically decorated.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;date_into_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;12/8/2014&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;date_in_past&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;date_in_past&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;getting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date_into_future&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;formatted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="n"&gt;_01_07&lt;/span&gt;


&lt;span class="n"&gt;getting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date_in_past&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;formatted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="n"&gt;_12_11&lt;/span&gt;


&lt;span class="n"&gt;getting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date_in_past&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;formatted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="n"&gt;_01_14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Working with Decorators</title><link href="http://www.deekras.com/working-with-decorators.html" rel="alternate"></link><updated>2014-12-15T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-15:working-with-decorators.html</id><summary type="html">&lt;h2&gt;Decorators: a function within a function&lt;/h2&gt;
&lt;p&gt;Now a post about decorators.  Decorators are quite useful - when you learn how to use them.  Here's my attempt at making them &lt;strike&gt;easy&lt;/strike&gt; easier to understand.&lt;/p&gt;
&lt;h3&gt;First, when might decorators be used?&lt;/h3&gt;
&lt;p&gt;Decorators are used to extend a function. To give it more functionality. You might want to time how long a function takes. Or, you might want to print a message to the user. Or, you might want to log some data about the function. &lt;/p&gt;
&lt;p&gt;Sometimes, you need to use a function that cannot be changed for whatever reason. Maybe you are getting from a library or another module. You can use a decorator to extend the function. Maybe you want to change the formatting. Or something else.&lt;/p&gt;
&lt;p&gt;Or, you don't want to change the original function, but you do want to extend it temporarily. You might do this when debugging. &lt;/p&gt;
&lt;p&gt;Also, decorators are used in Flask.&lt;/p&gt;
&lt;h3&gt;So, in very short, what are decorators?&lt;/h3&gt;
&lt;p&gt;Say, you have a function that returns a date. But you want the date in a different format.  You can call that date function and then call another function to format the date that you just got.  Or, you can extend the original date function - by wrapping it with a decorator function. In very, very short, the decorator builds on the original function.  &lt;/p&gt;
&lt;h3&gt;What's happening under the hood of decorators?&lt;/h3&gt;
&lt;p&gt;The decorator function (the outer function) is called. It seeks the original function (the one it is wrapping, the inner function) and the original function is run. Then, the decorator (outer) function is run on the return of the original (inner) function.&lt;/p&gt;
&lt;p&gt;It is just like saying: 
&lt;code&gt;original_func = outer_func(original_func)&lt;/code&gt;. In other words, the outer function is being run on the return of the original / inner function.  Oh, btw, functions can call other functions.&lt;/p&gt;
&lt;p&gt;That might not have explained it all, but after this whole blog and you see examples, it might make more sense. I'll attempt to break it down - dot by dot, so all dots are connected.  So hopefully all will be clear.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;OK, with that intro...&lt;/p&gt;
&lt;h3&gt;So how are decorators designed?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;create the function that will be the 'decorator'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create the functions that the decorator function will decorate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wrap the decorat&lt;strong&gt;ed&lt;/strong&gt; function with the decorat&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;call the &lt;strong&gt;original&lt;/strong&gt; function. (It is already wrapped and thus the decorator function will also run!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, so that makes it seem so simple. And it is - once you understand how to write the decorator function.&lt;/p&gt;
&lt;h3&gt;Some pseudo code of the decorator function.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;The decorator function&lt;/strong&gt; (outer function)&lt;/p&gt;
&lt;p&gt;1.define the decorator function  &lt;code&gt;def decorator(func):&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include the decorat&lt;strong&gt;ed&lt;/strong&gt; function as the argument in the parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The wrapper function&lt;/strong&gt; (inner function)&lt;/p&gt;
&lt;p&gt;2.define the wrapper function. This function is created on the fly; it wraps around the original function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This can also have args that will be used in the wrapper function. These are pulled from the arguments of the 'decorated function'. &lt;em&gt;For another discussion.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.&lt;em&gt;(optional)&lt;/em&gt; some code - of the wrapper function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this can be any code to be done BEFORE the original function is run. Maybe, print a message, collect a start time.  Or, you may not have any code here at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.include the original function, the &lt;code&gt;func&lt;/code&gt; (the argument in the decorator function) in the code of the wrapper function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it can be called on its own. ex: &lt;code&gt;func()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or called as part of a statement.  ex: &lt;code&gt;return '&amp;lt;em&amp;gt;{}&amp;lt;/em&amp;gt;'.format(func())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.&lt;em&gt;(optional)&lt;/em&gt; some code - of the wrapper function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this can be any code to be done AFTER the original function is run. Maybe, print a message, collect an end time.  Or, you may not have any code here at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.&lt;code&gt;return&lt;/code&gt; something in the wrapper function&lt;/p&gt;
&lt;p&gt;&lt;em&gt;back to&lt;/em&gt; &lt;strong&gt;the decorator function&lt;/strong&gt;  (outer function)&lt;/p&gt;
&lt;p&gt;7.&lt;code&gt;return&lt;/code&gt; what the &lt;code&gt;wrapper&lt;/code&gt; function returned&lt;/p&gt;
&lt;h3&gt;So here is some simple code:&lt;/h3&gt;
&lt;p&gt;This decorator will format any date in the YYYY_MM_DD format. (It uses &lt;code&gt;.format&lt;/code&gt; and &lt;code&gt;strftime&lt;/code&gt; directives.  See more about &lt;a href="http://strftime.org/"&gt;strftime directives&lt;/a&gt; and &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;.format&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pretty_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;getting the date from function: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;got the date: {} (before it was formatted)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:%Y}_{0:%m}_{0:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.&lt;code&gt;def pretty_date(func):&lt;/code&gt; : we define the function and include the &lt;code&gt;func&lt;/code&gt; as the argument.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;func&lt;/code&gt; is a variable that will call the original function that it is wrapping. Do not use the actual function name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.&lt;code&gt;def wrapper():&lt;/code&gt; : this is a function within a function, thus indented.&lt;/p&gt;
&lt;p&gt;3.&lt;code&gt;print 'getting the date from function: {}'.format(func.__name__)&lt;/code&gt; : We don't really need to put code before the function. This is just to show.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;func.__name__&lt;/code&gt; gives the name of &lt;code&gt;func&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.&lt;code&gt;date = func()&lt;/code&gt; : calls the function it is wrapping and assigns it to &lt;code&gt;date&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;code&gt;print 'got the date: {} (before it was formatted)'.format(date)&lt;/code&gt;. We don't really need to put code after the function. This is just to show.&lt;/p&gt;
&lt;p&gt;6.&lt;code&gt;return '{0:%Y}_{0:%m}_{0:%d}'.format(date)&lt;/code&gt; : Here's the return for the inner/ wrapper function.   ---Really, we could have put this line in for line 4. But then, we couldn't have the code to do AFTER the function. (You can't have anything after the &lt;code&gt;return&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;7.&lt;code&gt;return wrapper&lt;/code&gt; : returns what the &lt;code&gt;wrapper&lt;/code&gt; function returned.&lt;/p&gt;
&lt;p&gt;Whew! So, the decorator function has been created. That's the hard part.  Now just have to create the functions that will be decorated (or wrapped) with the decorator.&lt;/p&gt;
&lt;p&gt;In this case, we will create 3 separate functions - &lt;code&gt;get_today()&lt;/code&gt;, &lt;code&gt;get_tomorrrow()&lt;/code&gt;, &lt;code&gt;get_yesterday()&lt;/code&gt; to show how the same decorator can be used for several functions. (For more about working with dates and datetime and datedelta, &lt;a href="http://pymotw.com/2/datetime/"&gt;check out pymotw&lt;/a&gt;.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_yesterday&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2014-12-15 15:47:28.199614
2014-12-16 15:47:28.944899
2014-12-14 15:47:28.944958
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember, the &lt;code&gt;pretty_date&lt;/code&gt; decorator will 'prettify' the date in the format we specified.
The &lt;code&gt;pretty_date&lt;/code&gt; decorator function will take the return &lt;code&gt;get_today()&lt;/code&gt; function and run the &lt;code&gt;wrapper&lt;/code&gt; function on it. And return the 'prettified' date.&lt;/p&gt;
&lt;p&gt;Here goes the decorated functions.  Instead of the above functions standing on their own, we wrap them in the &lt;code&gt;pretty_date&lt;/code&gt; decorator.   Notice the &lt;code&gt;@&lt;/code&gt; before the decorator &lt;code&gt;pretty_date&lt;/code&gt;. Like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_yesterday&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then call the wrapped functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_tomorrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_yesterday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now the results are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2014_12_15
2014_12_16
2014_12_14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's decorators. In short.&lt;/p&gt;
&lt;p&gt;Oh, and a caveat: Those functions that are now wrapped - are always wrapped. That means that &lt;code&gt;get_today()&lt;/code&gt; can't be used to call for the full date &lt;code&gt;2014-12-15 15:47:28.199614&lt;/code&gt;. Whenever, we call &lt;code&gt;get_today()&lt;/code&gt;, it will return &lt;code&gt;2014_12_15&lt;/code&gt; format. You will have to create another function to get the unformatted date. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But that's not all. You can have several decorators wrap a function.&lt;/p&gt;
&lt;p&gt;Here, we'll define a few more decorators.  These create html tags around the string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;html_em&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;em&amp;gt;{}&amp;lt;/em&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;html_strong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;strong&amp;gt;{}&amp;lt;/strong&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's how we wrap the function with these wrappers too. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@html_em&lt;/span&gt;
&lt;span class="nd"&gt;@html_strong&lt;/span&gt;
&lt;span class="nd"&gt;@pretty_date&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The order matters!  It goes from top to bottom.  From the top of the ladder down (- and then back up again).&lt;/p&gt;
&lt;p&gt;1.First, it  will do &lt;code&gt;@html_em&lt;/code&gt; decorator function. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;func&lt;/code&gt; in &lt;code&gt;format(func())&lt;/code&gt; of that function will call the next decorator function &lt;code&gt;@html_strong&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;And wait for the &lt;code&gt;return&lt;/code&gt; from that call to do its job of adding the &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Then the &lt;code&gt;@html_strong&lt;/code&gt; decorator function will begin.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;func&lt;/code&gt; of the &lt;code&gt;@html_strong&lt;/code&gt;'s &lt;code&gt;format(func())&lt;/code&gt; will call the &lt;code&gt;@pretty_date&lt;/code&gt; decorator function. &lt;/li&gt;
&lt;li&gt;And wait for the &lt;code&gt;return&lt;/code&gt; to do its job of adding the &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.Then, the &lt;code&gt;@pretty_date&lt;/code&gt; decorator function will call the &lt;code&gt;get_today()&lt;/code&gt; function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;And wait for the &lt;code&gt;return&lt;/code&gt; to do its job of formatting the date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.The &lt;code&gt;get_today()&lt;/code&gt; function will get today's date.&lt;/p&gt;
&lt;p&gt;5.Then it goes back up the ladder. &lt;code&gt;@pretty_date&lt;/code&gt; does its work. &lt;code&gt;@html_strong&lt;/code&gt; add &lt;strong&gt;&lt;/strong&gt;&lt;code&gt;and&lt;/code&gt;@html_em&lt;code&gt;adds&lt;/code&gt;&lt;em&gt;&lt;/em&gt;`. &lt;/p&gt;
&lt;p&gt;And finally, the final &lt;code&gt;return&lt;/code&gt; is done.  The newly formatted, 'html'ed date!&lt;/p&gt;
&lt;p&gt;So in essence, the first thing that is being returned is the &lt;code&gt;datetime.datetime.today()&lt;/code&gt;, then it is returning the &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; and last it is returning the &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;2014_12_15&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;for much more on decorators&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python"&gt;from stackoverflow - check out the answer 'Decorator Basics'&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Working with Threads</title><link href="http://www.deekras.com/working-with-threads.html" rel="alternate"></link><updated>2014-12-14T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-14:working-with-threads.html</id><summary type="html">&lt;h3&gt;Working with Threads&lt;/h3&gt;
&lt;p&gt;I've been encouraged to learn sockets and threading. It's been fun. With some frustrating moments when the book I am using and the docs are just not clear enough - for me.  So here I present it in a way that would have worked for me. So I share - in case it makes learning about threads easier for someone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, a scenario where threading can be useful:&lt;/strong&gt; You're using one of those websites that check several airlines for best fares.  Finally the trip to Barcelona!  It would take a long time to search each airline separately.  It woud be so much faster if the computer would search several airlines concurrently.  Thankfully, that is what they do - saving us much time.&lt;/p&gt;
&lt;p&gt;That's exactly what threading does. The program sets off to do several things at the same time - each function on its own thread.  This is especially useful when the functions don't rely on or get data from each other.  Thread1 searches American Airlines, Thread2 searches Air France and Thread3 searches Iberia. And so on. And they each come back with their results when they are done. And then you can choose the best flight to Barcelona.&lt;/p&gt;
&lt;p&gt;So that's what threading does. Sure, that's oversimplified.  And, I'm not sure how those flight aggregator programs really work, but that is a scenario where we'd see the benefits of threads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What's happening under the hood of threads?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First some basic things to know:
- Threads execute parellel within the same process - and as such, they share all the same context (name space, address, etc.)
- Threads have a beginning, the execution and an end.
- locks. &lt;em&gt;Gotto add more here.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And here's how it all works - the pseudo code.&lt;/strong&gt;
 1. create the thread instances
 2. execute the code
 3. exit the thread and do whatever &lt;/p&gt;
&lt;p&gt;So in the case of the search for &lt;strike&gt; best tickets to Barcelona&lt;/strike&gt;. Nah, that would be too much code; here is a much simpler scenario. Trying to find the local time in several places in the world. (Of course, there is no real need to thread for these queries, since they are super quick. But this will give an idea about how threading works.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the search query - what places we are looking for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;these are hardcoded in a dictionary called &lt;code&gt;places&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;we'll use &lt;code&gt;www.timeapi.org&lt;/code&gt; to find the local time for those places.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a thread instance for each place&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in a &lt;code&gt;for loop&lt;/code&gt;, we will create a thread for each query.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the concurrent query searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When all query results come in, display the places and times on the screen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;atexit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt;

&lt;span class="n"&gt;url_lookup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www.timeapi.org/{}/now&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;Moscow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;msk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;Kuwait&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;ast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;est&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;Copenhagen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c"&gt;#place: time_zone code&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_display_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time_zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_lookup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_zone&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;    
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{:&amp;gt;10} | {:&amp;lt;15}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;starting at:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_display_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_atexit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;all done at:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First the imports.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url_lookup = 'http://www.timeapi.org/{}/now'&lt;/code&gt;:
Then, the url that we'll use to find the time. Notice the curly braces &lt;code&gt;{}&lt;/code&gt;. We'll use that later to insert the time_zone., with &lt;code&gt;.format&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;places&lt;/code&gt;: This is a dictionary of places and time zones codes (as this API likes it). &lt;/p&gt;
&lt;p&gt;&lt;code&gt;def _display_time(place):&lt;/code&gt;  This function&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;gets the time zone (the value of the key &lt;code&gt;place&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gets the current time - using the url with the time_zone inserted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uses the &lt;code&gt;requests&lt;/code&gt; method. Sends a 'GET' request to the url; the response will be the &lt;code&gt;.content&lt;/code&gt; of the &lt;code&gt;requests.get&lt;/code&gt;. See more about &lt;code&gt;requests&lt;/code&gt; in my &lt;a href="http://www.deekras.com/using-a-weather-api-forecastio.html#requests"&gt;previous post&lt;/a&gt; and in the &lt;a href="http://docs.python-requests.org/en/latest/"&gt;docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;uses the &lt;code&gt;.format&lt;/code&gt; method to insert the string data. &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;Read more about &lt;code&gt;.format&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prints/ displays the &lt;code&gt;place&lt;/code&gt; and &lt;code&gt;current_time&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{:&amp;gt;10}&lt;/code&gt; is the formatting - right aligned - 10 width.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:&amp;lt;15}&lt;/code&gt; - left aligned - 15 width&lt;/li&gt;
&lt;li&gt;Read more about formatting with &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;&lt;code&gt;.format&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current_time[11:19]&lt;/code&gt; - the time comes back as a long string &lt;code&gt;2014-12-14T01:47:46+00:00&lt;/code&gt;. I just sliced it to get the data I need. More about &lt;a href="https://docs.python.org/2/tutorial/introduction.html#strings"&gt;slicing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;def main():&lt;/code&gt;  This is where the threading happens!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;print the current time. Just to see how long the process takes.  To compare to the time we print at the very end of this whole script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;for loop&lt;/code&gt; for each &lt;code&gt;place&lt;/code&gt; in the &lt;code&gt;places&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;threading.Thread(target=_display_time, args=(place,)).start()&lt;/code&gt;: OK, a lot going on here. This is where all the threading happens.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;threading.Thread&lt;/code&gt;: A &lt;code&gt;Thread&lt;/code&gt; is an object that represents a single thread for execution.  We're in a loop here, so we'll be creating several instances of Thread.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Thread&lt;/code&gt; class has these arguments &lt;code&gt;threading.Thread(group=None, target=None, name=None, args=(), kwargs={})&lt;/code&gt;  We don't need all those in our case. &lt;a href="https://docs.python.org/2/library/threading.html#thread-objects"&gt;see more about Thread&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;target=_display_time&lt;/code&gt;: the target is the function that will be called (&lt;code&gt;run&lt;/code&gt;) when the Thread is created.  In this case it is the &lt;code&gt;_display_time&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args=(place,)&lt;/code&gt;: these are the args for the &lt;code&gt;target&lt;/code&gt;. In this case, the &lt;code&gt;place&lt;/code&gt; parameter for the &lt;code&gt;_display_time&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.start()&lt;/code&gt;: gets the thread started. The &lt;code&gt;start&lt;/code&gt; is what actually gets the &lt;code&gt;target&lt;/code&gt;/ _display_time function started.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;@register&lt;/code&gt; is a decorator for the &lt;code&gt;_atexit()&lt;/code&gt; function.  Together, they are a function that registers an exit function - to do something just before the script quits. In this case, print the current time to compare it to the start time. &lt;a href="https://docs.python.org/2/library/atexit.html"&gt;More about atexit()&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in way too short, decorators extend on the original function. &lt;a href="http://www.deekras.com/working-with-decorators.html"&gt;See my post about decorators.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there, a very simple threading process.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Of course, there is much more to threading. A very clear, easy to understand resource. &lt;a href="http://pymotw.com/2/threading/"&gt;http://pymotw.com/2/threading/&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Using a weather api (forecast.io)</title><link href="http://www.deekras.com/using-a-weather-api-forecastio.html" rel="alternate"></link><updated>2014-12-13T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-13:using-a-weather-api-forecastio.html</id><summary type="html">&lt;h4&gt;Kinda cool to get the weather jsut the way I need it&lt;/h4&gt;
&lt;p&gt;Moving along in discussing some of features of the little application I wrote.  &lt;/p&gt;
&lt;p&gt;I already &lt;a href="http://www.deekras.com/get-the-public-ip-of-users-computer.html"&gt;got the IP&lt;/a&gt; and then &lt;a href="http://www.deekras.com/finding-longitude-latitude-based-on-ip.html"&gt;found the longitude and latitude coordinates based on that IP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to find the local weather for the current day. I tried several weather apis that were suggested by fellow HackerSchoolers. I found that the best and easiest to use is &lt;a href="https://developer.forecast.io/"&gt;&lt;strong&gt;forecast.io&lt;/strong&gt;&lt;/a&gt;. And it gave me the opportunity to work with json files.&lt;/p&gt;
&lt;p&gt;First, I got myself a key from &lt;a href="https://developer.forecast.io/"&gt;https://developer.forecast.io/&lt;/a&gt;. It's free.&lt;/p&gt;
&lt;p&gt;And I also  did &lt;code&gt;pip install python-forecastio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I already had my &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt; so I passed those into the &lt;code&gt;get_weather&lt;/code&gt; function as parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;forecast_io_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;get your own key&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;api_forecast_io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://api.forecast.io/forecast/{}/{},{},{}&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_weather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{}T12:00:00-0400&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="n"&gt;lookup_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_forecast_io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forecast_io_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lookup_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;hourly_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;hourly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;date&lt;/code&gt;:    The api has optional parameter of time/date. This can be a datetime object. So first I import the &lt;code&gt;datetime&lt;/code&gt; module.
And import the &lt;a name="requests"&gt;&lt;code&gt;requests&lt;/code&gt; module &lt;/a&gt;  so I get the response from looking up a specific url. &lt;em&gt;Read more about &lt;a href="http://docs.python-requests.org/en/latest/"&gt;requests library&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The date/time must be either UNIX time or a string in this format. &lt;a href="#time"&gt;See comment below&lt;/a&gt;.   I like to use the &lt;code&gt;.format&lt;/code&gt; method to fill the string with variables. &lt;em&gt;Read more about &lt;a href="https://docs.python.org/2/library/string.html#formatstrings"&gt;.format&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lookup_url&lt;/code&gt;:   This is the url with the values filled in. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;json_response&lt;/code&gt;:     The response from the 'GET' request is a json file, which essentially is a list of dictionaries.  In this case,  a list of  dictionaries of dictionaries.  Seems like a threw myself right into a deep json file. Really had to sit on this file to understand it. Eventually I got it. &lt;em&gt;See  the json file below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hourly_data&lt;/code&gt;:   This is the &lt;code&gt;json_response&lt;/code&gt;, using the &lt;code&gt;hourly&lt;/code&gt; key to get the values of the &lt;code&gt;data&lt;/code&gt; key.   The value of the &lt;code&gt;hourly&lt;/code&gt; key is several dictionaries – one for every hour.&lt;/p&gt;
&lt;p&gt;Here's what just some of that json_response looks like. Look for the &lt;code&gt;hourly&lt;/code&gt; key (about 5 lines in) and then for the &lt;code&gt;data&lt;/code&gt; key (not far after the hourly key). &lt;em&gt;NOTE: I put in the line breaks; before the data was running as one long line.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;42.8964&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mf"&gt;78.8852&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;America/New_York&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;offset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;currently&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419436800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Overcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;
&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.09&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipType&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;48.29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;43.71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;45.09&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;155&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;6.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1003.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;294.97&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hourly&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Light rain starting overnight.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419397200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Overcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;44.44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;7.67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;146&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;1011.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;300.77&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419400800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Drizzle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;0.0081&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipType&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;44.19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;39.28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;8.14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1011.55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;300.83&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1419404400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Drizzle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipIntensity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0056&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipProbability&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;precipType&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;44.24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apparentTemperature&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;38.87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dewPoint&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;41.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;windSpeed&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.07&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;windBearing&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;147&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;7.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cloudCover&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1010.87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ozone&amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;300.48&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c1"&gt;# and there is much more in that json file.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly, I created a list of dictionaries of just the data I needed: for each hour, I need the temperature and windspeed and windchill. Using the temperature and windspeed, I could figure out the windchill.  I found the windchill formula online. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;  &lt;span class="c"&gt;# used in the windchill formula&lt;/span&gt;

&lt;span class="c"&gt;## continues from function above&lt;/span&gt;
&lt;span class="n"&gt;hourly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hourly_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;#find the windchill&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;windSpeed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;windchill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6215&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;35.75&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4275&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;hour_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;temperature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;windspeed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;windSpeed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;windchill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;windchill&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;hourly_weather&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hour_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hourly&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;hourly&lt;/code&gt;:    I created a blank list &lt;code&gt;hourly&lt;/code&gt; to which I will append a new dictionary for each hour.&lt;/p&gt;
&lt;p&gt;Using a for loop -  for each hour, I evaluate the windchill and create a new dictionary &lt;code&gt;hour_dict&lt;/code&gt; and add keys/ values for &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;temperature&lt;/code&gt;, &lt;code&gt;windSpeed&lt;/code&gt; and &lt;code&gt;windchill&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;windchill&lt;/code&gt;: I found the windchill formula online. I get &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; for the temperature and windspeed. Those one letters are much shorter than the full name of the variable, much easier to type. (BTW, &lt;code&gt;math.ceil(x)&lt;/code&gt; returns the smallest integer value greater than or equal to x. In other words, it always rounds up.)&lt;/p&gt;
&lt;p&gt;Lastly, I append the new dictionary to the &lt;code&gt;hourly&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;And walla! I have my list of dictionaries of weather info for each hour of the day.  Next step would be to display it in a useful way. Maybe a different color based on the windchill. According to that &lt;a href="https://www.idph.state.ia.us/hcci/common/pdf/weatherwatch.pdf"&gt;chart&lt;/a&gt;, a windchill above 32F is comfortable for outdoor play and thus can be presented in GREEN. YELLOW is for temps between 13F and 32F. Anything lower than that is RED. And I'd probably also provide the data in celsius.&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h3&gt;&lt;a name="time"&gt;about the TIME FORMAT &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TIME should either be a UNIX time (that is, seconds since midnight GMT on 1 Jan 1970) or a string formatted as follows: &lt;code&gt;[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS]&lt;/code&gt; (with an optional time zone formatted as Z for GMT time or {+,-}[HH][MM] for an offset in minutes or seconds). For the latter format, if no timezone is present, local time (at the provided latitude and longitude) is assumed. (This string format is a subset of ISO 8601 time. An as example, &lt;code&gt;2013-05-06T12:00:00-0400&lt;/code&gt;.)&lt;/p&gt;
&lt;h3&gt;MORE ABOUT THE PYTHON WRAPPER for FORECAST.IO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ZeevG/python-forecast.io"&gt;https://github.com/ZeevG/python-forecast.io&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Finding Longitude &amp; Latitude based on IP</title><link href="http://www.deekras.com/finding-longitude-latitude-based-on-ip.html" rel="alternate"></link><updated>2014-12-12T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-12:finding-longitude-latitude-based-on-ip.html</id><summary type="html">&lt;h4&gt;Once I had the IP, I needed to find the longitude &amp;amp; latitude coordinates&lt;/h4&gt;
&lt;p&gt;On that &lt;a href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html"&gt;recent project&lt;/a&gt; I was working on, I was looking for the local weather based on where the user is located. So first, &lt;a href="http://www.deekras.com/get-the-public-ip-of-users-computer.html"&gt;I got the IP&lt;/a&gt;. With that IP, I used &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt; to find the longitude and latitude coordinates.  Later, I will use those coordinates to find the local weather.&lt;/p&gt;
&lt;p&gt;First, I downloaded the GeoIP data from &lt;a href="https://pypi.python.org/pypi/pygeoip/"&gt;https://pypi.python.org/pypi/pygeoip/&lt;/a&gt; and unzipped it. And saved the GeoLiteCity.dat on my local server. &lt;code&gt;'/path/GeoLiteCity.dat'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also had to &lt;code&gt;pip install pygeoip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygeoip&lt;/span&gt;   

&lt;span class="n"&gt;geoip_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygeoip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeoIP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/path/GeoLiteCity.dat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_lat_lng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geoip_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_by_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;data&lt;/code&gt;:  In this case, I used the &lt;strong&gt;record_by_addr(addr)&lt;/strong&gt; attribute since I had the addr, the IP. And I want the full record.&lt;br /&gt;
There are many other attributes you can use with this geoip data. Checkout more at: &lt;a href="http://pygeoip.readthedocs.org/en/v0.3.2/api-reference.html"&gt;http://pygeoip.readthedocs.org/en/v0.3.2/api-reference.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a dictionary. And I called the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; keys of &lt;code&gt;data&lt;/code&gt; to find the values of &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lng&lt;/code&gt;, I will be able to get the weather for those coordinates. Using &lt;strong&gt;forecast_io&lt;/strong&gt;. More on that next time.&lt;/p&gt;</summary></entry><entry><title>Get the public IP of user's computer</title><link href="http://www.deekras.com/get-the-public-ip-of-users-computer.html" rel="alternate"></link><updated>2014-12-11T00:00:00+00:00</updated><author><name>Dee Kras</name></author><id>tag:www.deekras.com,2014-12-11:get-the-public-ip-of-users-computer.html</id><summary type="html">&lt;h4&gt;Here's how to get the IP&lt;/h4&gt;
&lt;p&gt;For a &lt;a href="http://www.deekras.com/my-first-python-project-and-what-i-learned.html"&gt;recent project&lt;/a&gt;, I needed to get the longitude and latitude of where the user was at the time.  And from that data, I could get the local weather.&lt;/p&gt;
&lt;p&gt;To do that, I'd find her local IP and then later use  &lt;strong&gt;pygeoip.GeoIP&lt;/strong&gt; to find the coordinates of that IP. (That's another post)&lt;/p&gt;
&lt;p&gt;First, I used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;request.remote_addr&lt;/code&gt;: &lt;code&gt;request&lt;/code&gt; is part of the &lt;a href="http://flask.pocoo.org/docs/0.10/api/"&gt;Flask module&lt;/a&gt; that i was using to create this web application. In very short, the &lt;code&gt;request&lt;/code&gt; 'remembers' the value of what we were requesting. Check out the &lt;a href="http://flask.pocoo.org/docs/0.10/api/#incoming-request-data"&gt;request class of Flask&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then a fellow HackerSchooler pointed out that sometimes that might get my local host (127.0.0.1) and not the IP as I thought I might get. &lt;/p&gt;
&lt;p&gt;The suggestion was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First attempt to get the IP that way, since it is more 'resources efficient'.&lt;/li&gt;
&lt;li&gt;Also have an &lt;code&gt;if&lt;/code&gt; statement to check if it did indeed get me that local host.&lt;/li&gt;
&lt;li&gt;And if it is the localhost, then use &lt;code&gt;icanhazip.com&lt;/code&gt; to get the IP.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;span class="c"&gt;#import the request module&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_ip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://icanhazip.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;requests.get&lt;/code&gt;:  the &lt;code&gt;ip&lt;/code&gt; is the response. It is the &lt;code&gt;content&lt;/code&gt; from the &lt;code&gt;get&lt;/code&gt; request to &lt;code&gt;"http://icanhazip.com/"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read more about the different attributes for&lt;/em&gt;  requests.get(some_url).attributes
&lt;a href="http://docs.python-requests.org/en/latest/user/quickstart/#make-a-request"&gt;http://docs.python-requests.org/en/latest/user/quickstart/#make-a-request&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;---MORE ABOUT REQUESTS---&lt;/h5&gt;
&lt;p&gt;requests is a more reliable library than the old urllib2&lt;br&gt;
&lt;a href="http://docs.python-requests.org/en/latest/"&gt;http://docs.python-requests.org/en/latest/ &lt;/a&gt; &lt;/p&gt;</summary></entry></feed>